[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my learning journey of geospatial analytics.\nReference has been taken from the following webpages/resources:\n\nISSS624 - Applied Geospatial Analytics\nR for Geospatial Data Science and Analytics"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "hands-on_ex1.html",
    "href": "hands-on_ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This exercise covers the following areas:\n\nGeospatial Data Wrangling with R\nChoropleth Mapping with R"
  },
  {
    "objectID": "hands-on_ex1.html#getting-started",
    "href": "hands-on_ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the necessary packages\n\npackages = c('sf', 'tidyverse')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "hands-on_ex1.html#reading-in-geospatial-data",
    "href": "hands-on_ex1.html#reading-in-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Reading in Geospatial Data",
    "text": "Reading in Geospatial Data\nReading in Master Plan 2014 Subzone Boundary (Web) shp file\n\nmpsz = st_read(dsn = 'data/session1/geospatial',\n               layer = 'MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\data\\session1\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nReading in Cycling Path shp file\n\ncyclingpath = st_read(dsn = 'data/session1/geospatial',\n                      layer = 'CyclingPath')\n\nReading layer `CyclingPath' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\data\\session1\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nReading in Pre-Schools kml file\n\npreschool = st_read('data/session1/geospatial/pre-schools-location-kml.kml')\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\data\\session1\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "hands-on_ex1.html#checking-contents-of-simple-feature-sf-dataframe",
    "href": "hands-on_ex1.html#checking-contents-of-simple-feature-sf-dataframe",
    "title": "Hands-on Exercise 1",
    "section": "Checking Contents of Simple Feature (sf) Dataframe",
    "text": "Checking Contents of Simple Feature (sf) Dataframe\nUsing st_geometry() to view the geometries\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nUsing glimpse() from dplyr to view attribute information\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nView complete information of first few rows with head()\n\nhead(mpsz, n=3)\n\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29..."
  },
  {
    "objectID": "hands-on_ex1.html#plotting-geospatial-data",
    "href": "hands-on_ex1.html#plotting-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\nUsing plot() to visualise the geospatial features. The default plot of an sf object is a multi-plot of all attributes (columns), up to a reasonable maximum as shown below.\n(Note: plot() is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.)\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nWe can customise our plot by choosing to plot only the geometry, using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz['PLN_AREA_N'])"
  },
  {
    "objectID": "hands-on_ex1.html#working-with-projection",
    "href": "hands-on_ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1",
    "section": "Working with Projection",
    "text": "Working with Projection\nIn order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate reference system (crs). When we project a simple feature (sf) dataframe from one crs to another crs, this process is called projection transformation.\nCheck the coordinate reference system of a sd dataframe using st_crs(). In the below sf dataframe, although it is projected in svy21, but when we read till the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct EPSG code to, st_set_crs() of sf package is used as shown in the code chunk below. Note that this does not perform projection transformation, it only changes/corrects the assigned crs for the dataframe.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nFor example, in the preschool sf dataframe, it is in wgs84 crs.\n\nst_crs(preschool)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nTo reproject preschool from one crs to another crs mathematically, we need to perform projection transformation using the code chunk below.\n(Note: In practice, we need to find out the appropriate project crs to use before performing projection transformation)\n\npreschool3414 <- st_transform(preschool, crs=3414)\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "hands-on_ex1.html#importing-and-converting-aspatial-data",
    "href": "hands-on_ex1.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nIn practice, it is not unusual that we will come across aspatial data. These are not geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points. We will learn to import an aspatial data into R environment and save it as a tibble data frame. Then, we will convert it into a sf dataframe.\nWe will load in the listings.csv data from AirBnb. As it is in csv format, we will use read_csv() of readr package to import the file. The output R object from read_csv() is a tibble dataframe.\n\nlistings <- read_csv('data/session1/aspatial/listings.csv')\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nUse list() from Base R (instead of glimpse()) to examine the tibble dataframe. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nThe code chunk below converts listing dataframe into a sf dataframe by using st_as_sf() of sf packages.\n\ncoords argument requires us to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires us to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. We can search for other country's epsg code by referring to epsg.io.\n\n\nlisting_sf <- st_as_sf(listings,\n                       coords = c('longitude', 'latitude'),\n                       crs=4326) %>% \n  st_transform(crs=3414)\n\nWe can examine the content of the newly created sf dataframe using glimpse(). The table below shows the content of listing_sf. Notice that a new column called geometry has been added into the dataframe. On the other hand, the longitude and latitude columns have been dropped from the data frame.\n\nglimpse(listing_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "hands-on_ex1.html#geoprocessing-with-sf-package",
    "href": "hands-on_ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions. Specifically, we will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\nBuffering\nThe scenario:\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extent of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist=5,\n                            nQuadSegs=30)\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, lengths() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$PreSch_Count <- lengths(st_intersects(mpsz3414, preschool3414))\n\nWe can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\nsummary(mpsz3414$PreSch_Count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, PreSch_Count)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch_Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nThe solution:\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\nmpsz3414 <- mpsz3414 %>% \n  mutate(PreSch_Density = PreSch_Count/Area * 1000000)\n\n\n\nExploratory Data Analysis (EDA)\nWe can plot a histogram to reveal the distribution of PreSch_Density.\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(PreSch_Density))) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='salmon') +\n  labs(title='Are pre-schools evenly distributed in Singapore?',\n       subtitle='There are many planning subzones with a single pre-school.\\nOn the other hand, there are two planning subzones with at least 20 pre-schools.',\n       x='Pre-school Density (per km sq)',\n       y='Frequency')\n\n\n\n\nWe can plot a scatterplot to show the relationship between PreSch_Density and PreSch_Count.\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(PreSch_Density),\n           y=PreSch_Count)) +\n  geom_point() +\n  labs(title='How are the pre-school counts related to the pre-school density?',\n       x='Pre-school Density (per km sq)',\n       y='Pre-school count')"
  },
  {
    "objectID": "hands-on_ex1.1.html",
    "href": "hands-on_ex1.1.html",
    "title": "Hands-on Exercise 1.1",
    "section": "",
    "text": "This exercise covers the following:\n\nGeospatial Data Wrangling with R"
  },
  {
    "objectID": "hands-on_ex1.1.html#getting-started",
    "href": "hands-on_ex1.1.html#getting-started",
    "title": "Hands-on Exercise 1.1",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the necessary packages\n\npackages = c('sf', 'tidyverse')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "hands-on_ex1.1.html#reading-in-geospatial-data",
    "href": "hands-on_ex1.1.html#reading-in-geospatial-data",
    "title": "Hands-on Exercise 1.1",
    "section": "Reading in Geospatial Data",
    "text": "Reading in Geospatial Data\nReading in Master Plan 2014 Subzone Boundary (Web) shp file\n\nmpsz <- st_read(dsn = 'data/session1/geospatial',\n               layer = 'MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\data\\session1\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nReading in Cycling Path shp file\n\ncyclingpath <- st_read(dsn = 'data/session1/geospatial',\n                      layer = 'CyclingPath')\n\nReading layer `CyclingPath' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\data\\session1\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nReading in Pre-Schools kml file\n\npreschool <- st_read('data/session1/geospatial/pre-schools-location-kml.kml')\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\data\\session1\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "hands-on_ex1.1.html#checking-contents-of-simple-feature-sf-dataframe",
    "href": "hands-on_ex1.1.html#checking-contents-of-simple-feature-sf-dataframe",
    "title": "Hands-on Exercise 1.1",
    "section": "Checking Contents of Simple Feature (sf) Dataframe",
    "text": "Checking Contents of Simple Feature (sf) Dataframe\nUsing st_geometry() to view the geometries\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nUsing glimpse() from dplyr to view attribute information\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nView complete information of first few rows with head()\n\nhead(mpsz, n=3)\n\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29..."
  },
  {
    "objectID": "hands-on_ex1.1.html#plotting-geospatial-data",
    "href": "hands-on_ex1.1.html#plotting-geospatial-data",
    "title": "Hands-on Exercise 1.1",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\nUsing plot() to visualise the geospatial features. The default plot of an sf object is a multi-plot of all attributes (columns), up to a reasonable maximum as shown below.\n(Note: plot() is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.)\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nWe can customise our plot by choosing to plot only the geometry, using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz['PLN_AREA_N'])"
  },
  {
    "objectID": "hands-on_ex1.1.html#working-with-projection",
    "href": "hands-on_ex1.1.html#working-with-projection",
    "title": "Hands-on Exercise 1.1",
    "section": "Working with Projection",
    "text": "Working with Projection\nIn order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate reference system (crs). When we project a simple feature (sf) dataframe from one crs to another crs, this process is called projection transformation.\nCheck the coordinate reference system of a sd dataframe using st_crs(). In the below sf dataframe, although it is projected in svy21, but when we read till the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct EPSG code to, st_set_crs() of sf package is used as shown in the code chunk below. Note that this does not perform projection transformation, it only changes/corrects the assigned crs for the dataframe.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nFor example, in the preschool sf dataframe, it is in wgs84 crs.\n\nst_crs(preschool)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nTo reproject preschool from one crs to another crs mathematically, we need to perform projection transformation using the code chunk below.\n(Note: In practice, we need to find out the appropriate project crs to use before performing projection transformation)\n\npreschool3414 <- st_transform(preschool, crs=3414)\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "hands-on_ex1.1.html#importing-and-converting-aspatial-data",
    "href": "hands-on_ex1.1.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1.1",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nIn practice, it is not unusual that we will come across aspatial data. These are not geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points. We will learn to import an aspatial data into R environment and save it as a tibble data frame. Then, we will convert it into a sf dataframe.\nWe will load in the listings.csv data from AirBnb. As it is in csv format, we will use read_csv() of readr package to import the file. The output R object from read_csv() is a tibble dataframe.\n\nlistings <- read_csv('data/session1/aspatial/listings.csv')\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nUse list() from Base R (instead of glimpse()) to examine the tibble dataframe. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nThe code chunk below converts listing dataframe into a sf dataframe by using st_as_sf() of sf packages.\n\ncoords argument requires us to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires us to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. We can search for other country’s epsg code by referring to epsg.io.\n\n\nlisting_sf <- st_as_sf(listings,\n                       coords = c('longitude', 'latitude'),\n                       crs=4326) %>% \n  st_transform(crs=3414)\n\nWe can examine the content of the newly created sf dataframe using glimpse(). The table below shows the content of listing_sf. Notice that a new column called geometry has been added into the dataframe. On the other hand, the longitude and latitude columns have been dropped from the data frame.\n\nglimpse(listing_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "hands-on_ex1.1.html#geoprocessing-with-sf-package",
    "href": "hands-on_ex1.1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1.1",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions. Specifically, we will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\nBuffering\nThe scenario:\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extent of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist=5,\n                            nQuadSegs=30)\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, lengths() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$PreSch_Count <- lengths(st_intersects(mpsz3414, preschool3414))\n\nWe can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\nsummary(mpsz3414$PreSch_Count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, PreSch_Count)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch_Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nThe solution:\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\nmpsz3414 <- mpsz3414 %>% \n  mutate(PreSch_Density = PreSch_Count/Area * 1000000)\n\n\n\nExploratory Data Analysis (EDA)\nWe can plot a histogram to reveal the distribution of PreSch_Density.\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(PreSch_Density))) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='salmon') +\n  labs(title='Are pre-schools evenly distributed in Singapore?',\n       subtitle='There are many planning subzones with a single pre-school.\\nOn the other hand, there are two planning subzones with at least 20 pre-schools.',\n       x='Pre-school Density (per km sq)',\n       y='Frequency')\n\n\n\n\nWe can plot a scatterplot to show the relationship between PreSch_Density and PreSch_Count.\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(PreSch_Density),\n           y=PreSch_Count)) +\n  geom_point() +\n  labs(title='How are the pre-school counts related to the pre-school density?',\n       x='Pre-school Density (per km sq)',\n       y='Pre-school count')"
  },
  {
    "objectID": "hands-on_ex1.2.html",
    "href": "hands-on_ex1.2.html",
    "title": "Hands-on Exercise 1.2",
    "section": "",
    "text": "This exercise covers the following:\n\nChoropleth Mapping with R"
  },
  {
    "objectID": "hands-on_ex1.2.html#getting-started",
    "href": "hands-on_ex1.2.html#getting-started",
    "title": "Hands-on Exercise 1.2",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the necessary packages\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "hands-on_ex1.2.html#reading-in-geospatial-data",
    "href": "hands-on_ex1.2.html#reading-in-geospatial-data",
    "title": "Hands-on Exercise 1.2",
    "section": "Reading in Geospatial Data",
    "text": "Reading in Geospatial Data\nReading in MP14_SUBZONE_WEB_PL shapefile.\n\nmpsz <- st_read(dsn = 'data/session1/geospatial',\n                layer = 'MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\data\\session1\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nExamine content of mpsz using the code chunk below\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "hands-on_ex1.2.html#reading-in-attribute-data",
    "href": "hands-on_ex1.2.html#reading-in-attribute-data",
    "title": "Hands-on Exercise 1.2",
    "section": "Reading in Attribute Data",
    "text": "Reading in Attribute Data\nReading in Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format. This is an aspatial data fie. Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\npopdata <- read_csv('data/session1/aspatial/respopagesextod2011to2020.csv')\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands-on_ex1.2.html#data-preparation",
    "href": "hands-on_ex1.2.html#data-preparation",
    "title": "Hands-on Exercise 1.2",
    "section": "Data Preparation",
    "text": "Data Preparation\nExamine popdata\n\nhead(popdata, n=3)\n\n# A tibble: 3 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n\n\nWrangling popdata to capture the population by the different age groups\n\npivot_wider() “widens” data, increasing the number of columns and decreasing the number of rows\n\n\npopdata2020 <- popdata %>% \n  filter(Time == 2020) %>% \n  group_by(PA, SZ, AG) %>% \n  summarise(POP = sum(Pop)) %>% \n  ungroup() %>% \n  pivot_wider(names_from = AG,\n              values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\npopdata2020\n\n# A tibble: 332 × 21\n   PA      SZ    0_to_…¹ 10_to…² 15_to…³ 20_to…⁴ 25_to…⁵ 30_to…⁶ 35_to…⁷ 40_to…⁸\n   <chr>   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Ang Mo… Ang …     170     280     340     270     260     310     330     400\n 2 Ang Mo… Chen…    1060    1040    1160    1330    1720    2020    2150    2080\n 3 Ang Mo… Chon…     850    1020    1070    1310    1610    1890    1720    1810\n 4 Ang Mo… Kebu…     680     960    1010    1170    1410    1420    1440    1630\n 5 Ang Mo… Semb…     210     400     450     500     500     340     300     370\n 6 Ang Mo… Shan…     560     640     700     860     970    1030     980    1010\n 7 Ang Mo… Tago…     200     390     460     590     680     500     330     430\n 8 Ang Mo… Town…     670     930     830     890    1310    1410    1420    1640\n 9 Ang Mo… Yio …       0       0       0       0       0       0       0       0\n10 Ang Mo… Yio …     160     210     260     300     320     240     250     260\n# … with 322 more rows, 11 more variables: `45_to_49` <dbl>, `5_to_9` <dbl>,\n#   `50_to_54` <dbl>, `55_to_59` <dbl>, `60_to_64` <dbl>, `65_to_69` <dbl>,\n#   `70_to_74` <dbl>, `75_to_79` <dbl>, `80_to_84` <dbl>, `85_to_89` <dbl>,\n#   `90_and_over` <dbl>, and abbreviated variable names ¹​`0_to_4`, ²​`10_to_14`,\n#   ³​`15_to_19`, ⁴​`20_to_24`, ⁵​`25_to_29`, ⁶​`30_to_34`, ⁷​`35_to_39`,\n#   ⁸​`40_to_44`\n\n\nFurther transformation of data, creating new column based on the following:\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npopdata2020 <- popdata2020 %>% \n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>% \n  mutate(ECONOMY_ACTIVE = rowSums(.[7:11]) + rowSums(.[13:15])) %>% \n  mutate(AGED = rowSums(.[16:21])) %>% \n  mutate(TOTAL = rowSums(.[3:21])) %>% \n  mutate(DEPENDENCY = (YOUNG + AGED)/ECONOMY_ACTIVE) %>% \n  select(PA, SZ, YOUNG, ECONOMY_ACTIVE, AGED, TOTAL, DEPENDENCY)\npopdata2020\n\n# A tibble: 332 × 7\n   PA         SZ                     YOUNG ECONOMY_ACTIVE  AGED TOTAL DEPENDENCY\n   <chr>      <chr>                  <dbl>          <dbl> <dbl> <dbl>      <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre  1290           2760   760  4810      0.743\n 2 Ang Mo Kio Cheng San               5640          16460  6050 28150      0.710\n 3 Ang Mo Kio Chong Boon              5100          15000  6470 26570      0.771\n 4 Ang Mo Kio Kebun Bahru             4620          13010  5120 22750      0.749\n 5 Ang Mo Kio Sembawang Hills         1880           3630  1310  6820      0.879\n 6 Ang Mo Kio Shangri-La              3330           9050  3610 15990      0.767\n 7 Ang Mo Kio Tagore                  1940           4480  1530  7950      0.775\n 8 Ang Mo Kio Townsville              4190          11950  5100 21240      0.777\n 9 Ang Mo Kio Yio Chu Kang               0              0     0     0    NaN    \n10 Ang Mo Kio Yio Chu Kang East       1110           2410   750  4270      0.772\n# … with 322 more rows\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\nmutate_at makes it easier to mutate multiple columns. .funs behaves like a lambda\n\n\npopdata2020 <- popdata2020 %>% \n  mutate_at(.vars = vars(PA, SZ),\n            .funs = funs(toupper)) %>% \n  filter(ECONOMY_ACTIVE > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\npopdata2020\n\n# A tibble: 234 × 7\n   PA         SZ                     YOUNG ECONOMY_ACTIVE  AGED TOTAL DEPENDENCY\n   <chr>      <chr>                  <dbl>          <dbl> <dbl> <dbl>      <dbl>\n 1 ANG MO KIO ANG MO KIO TOWN CENTRE  1290           2760   760  4810      0.743\n 2 ANG MO KIO CHENG SAN               5640          16460  6050 28150      0.710\n 3 ANG MO KIO CHONG BOON              5100          15000  6470 26570      0.771\n 4 ANG MO KIO KEBUN BAHRU             4620          13010  5120 22750      0.749\n 5 ANG MO KIO SEMBAWANG HILLS         1880           3630  1310  6820      0.879\n 6 ANG MO KIO SHANGRI-LA              3330           9050  3610 15990      0.767\n 7 ANG MO KIO TAGORE                  1940           4480  1530  7950      0.775\n 8 ANG MO KIO TOWNSVILLE              4190          11950  5100 21240      0.777\n 9 ANG MO KIO YIO CHU KANG EAST       1110           2410   750  4270      0.772\n10 ANG MO KIO YIO CHU KANG WEST       5690          13750  4680 24120      0.754\n# … with 224 more rows\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier. The mpsz dataset is used as the left data table to ensure that the output will be a sf dataframe.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c('SUBZONE_N' = 'SZ'))\nmpsz_pop2020\n\nSimple feature collection with 323 features and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area              PA YOUNG ECONOMY_ACTIVE AGED\n1  29220.19   5267.381  1630379.3            <NA>    NA             NA   NA\n2  29782.05   3506.107   559816.2          OUTRAM   930           3130 2120\n3  29974.66   1740.926   160807.5 SINGAPORE RIVER     0             40   10\n4  29933.77   3313.625   595428.9     BUKIT MERAH  2600           7450 3320\n5  30005.70   2825.594   387429.4     BUKIT MERAH  2760           6160 1740\n6  29991.38   4428.913  1030378.8     BUKIT MERAH  2800           7340 3420\n7  30230.86   3275.312   551732.0     BUKIT MERAH  2750           8080 3610\n8  30222.86   2208.619   290184.7 SINGAPORE RIVER     0             50   10\n9  29893.78   6571.323  1084792.3      QUEENSTOWN  1120           2770  610\n10 30104.18   3454.239   631644.3      QUEENSTOWN    30            160   60\n   TOTAL DEPENDENCY                       geometry\n1     NA         NA MULTIPOLYGON (((31495.56 30...\n2   6180  0.9744409 MULTIPOLYGON (((29092.28 30...\n3     50  0.2500000 MULTIPOLYGON (((29932.33 29...\n4  13370  0.7946309 MULTIPOLYGON (((27131.28 30...\n5  10660  0.7305195 MULTIPOLYGON (((26451.03 30...\n6  13560  0.8474114 MULTIPOLYGON (((25899.7 297...\n7  14440  0.7871287 MULTIPOLYGON (((27746.95 30...\n8     60  0.2000000 MULTIPOLYGON (((29351.26 29...\n9   4500  0.6245487 MULTIPOLYGON (((20996.49 30...\n10   250  0.5625000 MULTIPOLYGON (((24472.11 29...\n\n\nWrite to an rds file\n\nwrite_rds(mpsz_pop2020, 'data/session1/rds/mpszpop2020_new.rds')"
  },
  {
    "objectID": "hands-on_ex1.2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "hands-on_ex1.2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1.2",
    "section": "Choropleth Mapping Geospatial Data using tmap",
    "text": "Choropleth Mapping Geospatial Data using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\nPlotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases. The code chunk below will draw a cartographic standard choropleth map.\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020,\n    fill = 'DEPENDENCY')\n\n\n\n\n\n\nCreating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = 'Blues',\n          title = 'Dependency ratio') +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',\n            main.title.position = 'center',\n            main.title.size = 1,\n            legend.height = 0.25,\n            legend.width = 0.2,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = '8star', size = 0.6) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA) and Population data from Department of Statistics DOS',\n             position = c('left', 'bottom'))\n\n\n\n\nThe following are step-by-step breakdown of tmap functions:\n\nDrawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons(). In the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons('DEPENDENCY')\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nActually, tm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map. The code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY')\n\n\n\n\nTo add the boundary of the planning subzones, tm_borders will be used.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY') +\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\nData classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes. tmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks. To define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n = 5,\n          style = 'quantile') +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe below code chunk uses equal data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n = 7,\n          style = 'equal') +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe below code chunk uses kmeans data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n = 5,\n          style = 'kmeans') +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\nPlotting choropleth map with custom break\nFor all built-in classfication styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nUsing the results above, we set break points at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 19.00. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 19.00).\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          breaks = c(0,0.60,0.70,0.80,0.90,19.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nColour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package. To change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n = 6,\n          style = 'quantile',\n          palette = 'Blues') +\n  tm_borders(alpha = 0.5)\n\n\n\n\nTo revers the colour shading, add a ‘-’ prefix.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = '-Blues') +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\nMap Legend - In tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'jenks',\n          palette = 'Blues',\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',\n            main.title.position = 'center',\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c('right','bottom'),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMap Style - tmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = 'Greens') +\n  tm_borders(alpha = 0.5) +\n  tmap_style('classic')\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\nCartographic Furniture - Beside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines. In the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = 'Blues',\n          title = 'No. of persons') +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',\n            main.title.position = 'center',\n            main.title.size = 1,\n            legend.height = 0.25,\n            legend.width = 0.2,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = '8star', size = 0.6) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA) and Population data from Department of Statistics DOS',\n             position = c('left', 'bottom')) +\n  tmap_style('cobalt')\n\ntmap style set to \"cobalt\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\nDrawing small multiple choropleth maps\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\nAssigning multiple values to at least one of the aesthetics arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(c('YOUNG', 'AGED'),\n          style = 'equal',\n          palette = 'Blues') +\n  tm_layout(legend.position = c('right', 'bottom')) +\n  tm_borders(alpha = 0.5) +\n  tmap_style('white')\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nDefining a group_by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = 'Blues',\n          thres.poly = 0) +\n  tm_facets(by = 'REGION_N',\n            free.coords = TRUE,\n            drop.shapes = TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c('center', 'center'),\n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\nCreating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap <- tm_shape(mpsz_pop2020) +\n  tm_polygons('YOUNG',\n              style = 'quantile',\n              palette = 'Blues')\n\nagedmap <- tm_shape(mpsz_pop2020) +\n  tm_polygons('AGED',\n              style = 'quantile',\n              palette = 'Blues')\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criteria\nInstead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=='CENTRAL REGION', ]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "This exercise covers the following:\n\nSpatial Weights and Applications"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#getting-started",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#getting-started",
    "title": "In-class Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the required packages. spdep package is a collection of functions for creating spatial weights matrix objects.\n\n# remotes::install_version('spData', version = '2.2.1')\n# install.packages('spdep')\npacman::p_load(sf, spdep, tidyverse, tmap)"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#importing-geospatial-data",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#importing-geospatial-data",
    "title": "In-class Exercise 1",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nThis code chunk will import ESRI shapefile into R.\n\n# hunan <- st_read(dsn = 'data/geospatial',\n#                 layer = 'Hunan')"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html",
    "title": "Hands-on Exercise 1.1",
    "section": "",
    "text": "This exercise covers the following:\n\nGeospatial Data Wrangling with R"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#getting-started",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#getting-started",
    "title": "Hands-on Exercise 1.1",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the necessary packages\n\npackages = c('sf', 'tidyverse')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#reading-in-geospatial-data",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#reading-in-geospatial-data",
    "title": "Hands-on Exercise 1.1",
    "section": "Reading in Geospatial Data",
    "text": "Reading in Geospatial Data\nReading in Master Plan 2014 Subzone Boundary (Web) shapefile.\n\nmpsz <- st_read(dsn = 'data/geospatial',\n               layer = 'MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\hands-on_exercises\\hands-on_ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nReading in Cycling Path shapefile.\n\ncyclingpath <- st_read(dsn = 'data/geospatial',\n                      layer = 'CyclingPath')\n\nReading layer `CyclingPath' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\hands-on_exercises\\hands-on_ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nReading in Pre-Schools kml file. We will use the full path to load for kml and geojson files. This is unlike the shapefiles previously where we first provide the data source name (dsn) then the layers. This is because for shapefiles there are many multiple subfiles/layers.\n\npreschool <- st_read('data/geospatial/pre-schools-location-kml.kml')\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\hands-on_exercises\\hands-on_ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#checking-contents-of-simple-feature-sf-dataframe",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#checking-contents-of-simple-feature-sf-dataframe",
    "title": "Hands-on Exercise 1.1",
    "section": "Checking Contents of Simple Feature (sf) Dataframe",
    "text": "Checking Contents of Simple Feature (sf) Dataframe\nUsing st_geometry() to view the geometries\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nUsing glimpse() from dplyr to view attribute information\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nView complete information of first few rows with head()\n\nhead(mpsz, n=3)\n\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29..."
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#plotting-geospatial-data",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#plotting-geospatial-data",
    "title": "Hands-on Exercise 1.1",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\nUsing plot() to visualise the geospatial features. The default plot of an sf object is a multi-plot of all attributes (columns), up to a reasonable maximum as shown below.\n(Note: plot() is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.)\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nWe can customise our plot by choosing to plot only the geometry, using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also choose to plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz['PLN_AREA_N'])"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#working-with-projection",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#working-with-projection",
    "title": "Hands-on Exercise 1.1",
    "section": "Working with Projection",
    "text": "Working with Projection\nIn order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate reference system (crs). When we project a simple feature (sf) dataframe from one crs to another crs, this process is called projection transformation.\nCheck the coordinate reference system of a sd dataframe using st_crs(). In the below sf dataframe, although it is projected in svy21, but when we read till the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct EPSG code to, st_set_crs() of sf package is used as shown in the code chunk below. Note that this does not perform projection transformation, it only changes/corrects the assigned crs for the dataframe.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nFor example, in the preschool sf dataframe, it is in wgs84 crs.\n\nst_crs(preschool)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nTo reproject preschool from one crs to another crs mathematically, we need to perform projection transformation using the code chunk below.\n(Note: In practice, we need to find out the appropriate project crs to use before performing projection transformation. In Singapore, we typically use we typically use SVY21 or 3414).\n(Note: We can combine this step when we load in the data as well, using piping to follow st_read with the st_transform function)\n\npreschool3414 <- st_transform(preschool, crs=3414)\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#importing-and-converting-aspatial-data",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1.1",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nIn practice, it is not unusual that we will come across aspatial data. These are not geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points. We will learn to import an aspatial data into R environment and save it as a tibble data frame. Then, we will convert it into a sf dataframe.\nWe will load in the listings.csv data from AirBnb. As it is in csv format, we will use read_csv() of readr package to import the file. The output R object from read_csv() is a tibble dataframe.\n\nlistings <- read_csv('data/aspatial/listings.csv')\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nUse list() from Base R (instead of glimpse()) to examine the tibble dataframe. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nThe code chunk below converts listing dataframe into a sf dataframe by using st_as_sf() of sf packages.\n\ncoords argument requires us to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires us to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. We can search for other country’s epsg code by referring to epsg.io.\n\n\nlisting_sf <- st_as_sf(listings,\n                       coords = c('longitude', 'latitude'),\n                       crs=4326) %>% \n  st_transform(crs=3414)\n\nWe can examine the content of the newly created sf dataframe using glimpse(). The table below shows the content of listing_sf. Notice that a new column called geometry has been added into the dataframe. On the other hand, the longitude and latitude columns have been dropped from the data frame.\n\nglimpse(listing_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#geoprocessing-with-sf-package",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1.1",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions. Specifically, we will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\nBuffering\nThe scenario:\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extent of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist=5,\n                            nQuadSegs=30)\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nLastly, sum() of Base R will be used to derive the total land involved\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, lengths() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$PreSch_Count <- lengths(st_intersects(mpsz3414, preschool3414))\n\nWe can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\nsummary(mpsz3414$PreSch_Count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, PreSch_Count)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch_Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nThe solution:\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\nmpsz3414 <- mpsz3414 %>% \n  mutate(PreSch_Density = PreSch_Count/Area * 1000000)\n\n\n\nExploratory Data Analysis (EDA)\nWe can plot a histogram to reveal the distribution of PreSch_Density.\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(PreSch_Density))) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='salmon') +\n  labs(title='Are pre-schools evenly distributed in Singapore?',\n       subtitle='There are many planning subzones with a single pre-school.\\nOn the other hand, there are two planning subzones with at least 20 pre-schools.',\n       x='Pre-school Density (per km sq)',\n       y='Frequency')\n\n\n\n\nWe can plot a scatterplot to show the relationship between PreSch_Density and PreSch_Count.\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(PreSch_Density),\n           y=PreSch_Count)) +\n  geom_point() +\n  labs(title='How are the pre-school counts related to the pre-school density?',\n       x='Pre-school Density (per km sq)',\n       y='Pre-school count')"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html",
    "title": "Hands-on Exercise 1.2",
    "section": "",
    "text": "This exercise covers the following:\n\nChoropleth Mapping with R"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#getting-started",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#getting-started",
    "title": "Hands-on Exercise 1.2",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the necessary packages\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#reading-in-geospatial-data",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#reading-in-geospatial-data",
    "title": "Hands-on Exercise 1.2",
    "section": "Reading in Geospatial Data",
    "text": "Reading in Geospatial Data\nReading in MP14_SUBZONE_WEB_PL shapefile.\n\nmpsz <- st_read(dsn = 'data/geospatial',\n                layer = 'MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\hands-on_exercises\\hands-on_ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nExamine content of mpsz using the code chunk below\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#reading-in-attribute-data",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#reading-in-attribute-data",
    "title": "Hands-on Exercise 1.2",
    "section": "Reading in Attribute Data",
    "text": "Reading in Attribute Data\nReading in Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format. This is an aspatial data fie. Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\npopdata <- read_csv('data/aspatial/respopagesextod2011to2020.csv')\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#data-preparation",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#data-preparation",
    "title": "Hands-on Exercise 1.2",
    "section": "Data Preparation",
    "text": "Data Preparation\nExamine popdata\n\nhead(popdata, n=3)\n\n# A tibble: 3 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n\n\nWrangling popdata to capture the population by the different age groups\n\npivot_wider() “widens” data, increasing the number of columns and decreasing the number of rows\n\n\npopdata2020 <- popdata %>% \n  filter(Time == 2020) %>% \n  group_by(PA, SZ, AG) %>% \n  summarise(POP = sum(Pop)) %>% \n  ungroup() %>% \n  pivot_wider(names_from = AG,\n              values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\npopdata2020\n\n# A tibble: 332 × 21\n   PA      SZ    0_to_…¹ 10_to…² 15_to…³ 20_to…⁴ 25_to…⁵ 30_to…⁶ 35_to…⁷ 40_to…⁸\n   <chr>   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Ang Mo… Ang …     170     280     340     270     260     310     330     400\n 2 Ang Mo… Chen…    1060    1040    1160    1330    1720    2020    2150    2080\n 3 Ang Mo… Chon…     850    1020    1070    1310    1610    1890    1720    1810\n 4 Ang Mo… Kebu…     680     960    1010    1170    1410    1420    1440    1630\n 5 Ang Mo… Semb…     210     400     450     500     500     340     300     370\n 6 Ang Mo… Shan…     560     640     700     860     970    1030     980    1010\n 7 Ang Mo… Tago…     200     390     460     590     680     500     330     430\n 8 Ang Mo… Town…     670     930     830     890    1310    1410    1420    1640\n 9 Ang Mo… Yio …       0       0       0       0       0       0       0       0\n10 Ang Mo… Yio …     160     210     260     300     320     240     250     260\n# … with 322 more rows, 11 more variables: `45_to_49` <dbl>, `5_to_9` <dbl>,\n#   `50_to_54` <dbl>, `55_to_59` <dbl>, `60_to_64` <dbl>, `65_to_69` <dbl>,\n#   `70_to_74` <dbl>, `75_to_79` <dbl>, `80_to_84` <dbl>, `85_to_89` <dbl>,\n#   `90_and_over` <dbl>, and abbreviated variable names ¹​`0_to_4`, ²​`10_to_14`,\n#   ³​`15_to_19`, ⁴​`20_to_24`, ⁵​`25_to_29`, ⁶​`30_to_34`, ⁷​`35_to_39`,\n#   ⁸​`40_to_44`\n\n\nFurther transformation of data, creating new column based on the following:\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npopdata2020 <- popdata2020 %>% \n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>% \n  mutate(ECONOMY_ACTIVE = rowSums(.[7:11]) + rowSums(.[13:15])) %>% \n  mutate(AGED = rowSums(.[16:21])) %>% \n  mutate(TOTAL = rowSums(.[3:21])) %>% \n  mutate(DEPENDENCY = (YOUNG + AGED)/ECONOMY_ACTIVE) %>% \n  select(PA, SZ, YOUNG, ECONOMY_ACTIVE, AGED, TOTAL, DEPENDENCY)\npopdata2020\n\n# A tibble: 332 × 7\n   PA         SZ                     YOUNG ECONOMY_ACTIVE  AGED TOTAL DEPENDENCY\n   <chr>      <chr>                  <dbl>          <dbl> <dbl> <dbl>      <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre  1290           2760   760  4810      0.743\n 2 Ang Mo Kio Cheng San               5640          16460  6050 28150      0.710\n 3 Ang Mo Kio Chong Boon              5100          15000  6470 26570      0.771\n 4 Ang Mo Kio Kebun Bahru             4620          13010  5120 22750      0.749\n 5 Ang Mo Kio Sembawang Hills         1880           3630  1310  6820      0.879\n 6 Ang Mo Kio Shangri-La              3330           9050  3610 15990      0.767\n 7 Ang Mo Kio Tagore                  1940           4480  1530  7950      0.775\n 8 Ang Mo Kio Townsville              4190          11950  5100 21240      0.777\n 9 Ang Mo Kio Yio Chu Kang               0              0     0     0    NaN    \n10 Ang Mo Kio Yio Chu Kang East       1110           2410   750  4270      0.772\n# … with 322 more rows\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\nmutate_at makes it easier to mutate multiple columns. .funs behaves like a lambda\n\n\npopdata2020 <- popdata2020 %>% \n  mutate_at(.vars = vars(PA, SZ),\n            .funs = funs(toupper)) %>% \n  filter(ECONOMY_ACTIVE > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\npopdata2020\n\n# A tibble: 234 × 7\n   PA         SZ                     YOUNG ECONOMY_ACTIVE  AGED TOTAL DEPENDENCY\n   <chr>      <chr>                  <dbl>          <dbl> <dbl> <dbl>      <dbl>\n 1 ANG MO KIO ANG MO KIO TOWN CENTRE  1290           2760   760  4810      0.743\n 2 ANG MO KIO CHENG SAN               5640          16460  6050 28150      0.710\n 3 ANG MO KIO CHONG BOON              5100          15000  6470 26570      0.771\n 4 ANG MO KIO KEBUN BAHRU             4620          13010  5120 22750      0.749\n 5 ANG MO KIO SEMBAWANG HILLS         1880           3630  1310  6820      0.879\n 6 ANG MO KIO SHANGRI-LA              3330           9050  3610 15990      0.767\n 7 ANG MO KIO TAGORE                  1940           4480  1530  7950      0.775\n 8 ANG MO KIO TOWNSVILLE              4190          11950  5100 21240      0.777\n 9 ANG MO KIO YIO CHU KANG EAST       1110           2410   750  4270      0.772\n10 ANG MO KIO YIO CHU KANG WEST       5690          13750  4680 24120      0.754\n# … with 224 more rows\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier. The mpsz dataset is used as the left data table to ensure that the output will be a sf dataframe.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c('SUBZONE_N' = 'SZ'))\nmpsz_pop2020\n\nSimple feature collection with 323 features and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area              PA YOUNG ECONOMY_ACTIVE AGED\n1  29220.19   5267.381  1630379.3            <NA>    NA             NA   NA\n2  29782.05   3506.107   559816.2          OUTRAM   930           3130 2120\n3  29974.66   1740.926   160807.5 SINGAPORE RIVER     0             40   10\n4  29933.77   3313.625   595428.9     BUKIT MERAH  2600           7450 3320\n5  30005.70   2825.594   387429.4     BUKIT MERAH  2760           6160 1740\n6  29991.38   4428.913  1030378.8     BUKIT MERAH  2800           7340 3420\n7  30230.86   3275.312   551732.0     BUKIT MERAH  2750           8080 3610\n8  30222.86   2208.619   290184.7 SINGAPORE RIVER     0             50   10\n9  29893.78   6571.323  1084792.3      QUEENSTOWN  1120           2770  610\n10 30104.18   3454.239   631644.3      QUEENSTOWN    30            160   60\n   TOTAL DEPENDENCY                       geometry\n1     NA         NA MULTIPOLYGON (((31495.56 30...\n2   6180  0.9744409 MULTIPOLYGON (((29092.28 30...\n3     50  0.2500000 MULTIPOLYGON (((29932.33 29...\n4  13370  0.7946309 MULTIPOLYGON (((27131.28 30...\n5  10660  0.7305195 MULTIPOLYGON (((26451.03 30...\n6  13560  0.8474114 MULTIPOLYGON (((25899.7 297...\n7  14440  0.7871287 MULTIPOLYGON (((27746.95 30...\n8     60  0.2000000 MULTIPOLYGON (((29351.26 29...\n9   4500  0.6245487 MULTIPOLYGON (((20996.49 30...\n10   250  0.5625000 MULTIPOLYGON (((24472.11 29...\n\n\nWrite to an rds file\n\nwrite_rds(mpsz_pop2020, 'data/rds/mpszpop2020_new.rds')"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "hands-on_exercises/hands-on_ex1/hands-on_ex1.2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1.2",
    "section": "Choropleth Mapping Geospatial Data using tmap",
    "text": "Choropleth Mapping Geospatial Data using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\nPlotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases. The code chunk below will draw a cartographic standard choropleth map.\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020,\n    fill = 'DEPENDENCY')\n\n\n\n\n\n\nCreating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = 'Blues',\n          title = 'Dependency ratio') +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',\n            main.title.position = 'center',\n            main.title.size = 1,\n            legend.height = 0.25,\n            legend.width = 0.2,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = '8star', size = 0.6) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA) and Population data from Department of Statistics DOS',\n             position = c('left', 'bottom'))\n\n\n\n\nThe following are step-by-step breakdown of tmap functions:\n\nDrawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons(). In the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons('DEPENDENCY')\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nActually, tm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map. The code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY')\n\n\n\n\nTo add the boundary of the planning subzones, tm_borders will be used.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY') +\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\nData classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes. tmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks. To define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n = 5,\n          style = 'quantile') +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe below code chunk uses equal data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n = 7,\n          style = 'equal') +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe below code chunk uses kmeans data classification method.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n = 5,\n          style = 'kmeans') +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\nPlotting choropleth map with custom break\nFor all built-in classfication styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nUsing the results above, we set break points at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 19.00. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 19.00).\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          breaks = c(0,0.60,0.70,0.80,0.90,19.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nColour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package. To change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          n = 6,\n          style = 'quantile',\n          palette = 'Blues') +\n  tm_borders(alpha = 0.5)\n\n\n\n\nTo revers the colour shading, add a ‘-’ prefix.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = '-Blues') +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\nMap Legend - In tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'jenks',\n          palette = 'Blues',\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',\n            main.title.position = 'center',\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c('right','bottom'),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMap Style - tmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = 'Greens') +\n  tm_borders(alpha = 0.5) +\n  tmap_style('classic')\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\nCartographic Furniture - Beside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines. In the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = 'Blues',\n          title = 'No. of persons') +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',\n            main.title.position = 'center',\n            main.title.size = 1,\n            legend.height = 0.25,\n            legend.width = 0.2,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = '8star', size = 0.6) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA) and Population data from Department of Statistics DOS',\n             position = c('left', 'bottom')) +\n  tmap_style('cobalt')\n\ntmap style set to \"cobalt\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\nDrawing small multiple choropleth maps\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\nAssigning multiple values to at least one of the aesthetics arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(c('YOUNG', 'AGED'),\n          style = 'equal',\n          palette = 'Blues') +\n  tm_layout(legend.position = c('right', 'bottom')) +\n  tm_borders(alpha = 0.5) +\n  tmap_style('white')\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nDefining a group_by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill('DEPENDENCY',\n          style = 'quantile',\n          palette = 'Blues',\n          thres.poly = 0) +\n  tm_facets(by = 'REGION_N',\n            free.coords = TRUE,\n            drop.shapes = TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c('center', 'center'),\n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\nCreating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap <- tm_shape(mpsz_pop2020) +\n  tm_polygons('YOUNG',\n              style = 'quantile',\n              palette = 'Blues')\n\nagedmap <- tm_shape(mpsz_pop2020) +\n  tm_polygons('AGED',\n              style = 'quantile',\n              palette = 'Blues')\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criteria\nInstead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=='CENTRAL REGION', ]) +\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#importing-csv-data",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#importing-csv-data",
    "title": "In-class Exercise 1",
    "section": "Importing csv Data",
    "text": "Importing csv Data\nThis code chunk will import Hunan_2012.csv file into R\n\n# hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#importing-data",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#importing-data",
    "title": "In-class Exercise 1",
    "section": "Importing Data",
    "text": "Importing Data\n\nImporting Geospatial Data\nThis code chunk will import Hunan shapefile into R. The imported shapefile will be simple features object of sf.\n\nhunan <- st_read(dsn = 'data/geospatial',\n                layer = 'Hunan')\n\nReading layer `Hunan' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\in-class_exercises\\in-class_ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nExamine the hunan sf dataframe.\n\nhead(hunan, n=3)\n\nSimple feature collection with 3 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 111.7027 ymin: 28.61762 xmax: 112.3013 ymax: 29.77344\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n\n\n\n\nImporting CSV Data\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nExamine the hunan2012 dataframe.\n\nhead(hunan2012)\n\n# A tibble: 6 × 29\n  County   City  avg_w…¹ depos…²   FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO  Loan\n  <chr>    <chr>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl> <dbl>\n1 Anhua    Yiya…   30544  10967  6832.    457.   2703  13225  14567  9277. 3955.\n2 Anren    Chen…   28058   4599. 6386.    221.   1455.  4941. 12761  4189. 2555.\n3 Anxiang  Chan…   31935   5517. 3541     244.   1780. 12482  23667  5109. 2807.\n4 Baojing  Huna…   30843   2250  1005.    193.   1379.  4088. 14563  3624. 1254.\n5 Chaling  Zhuz…   31251   8241. 6508.    620.   1947  11585  20078  9158. 4287.\n6 Changni… Heng…   28518  10860  7920     770.   2632. 19886  24418 37392  4243.\n# … with 18 more variables: NIPCR <dbl>, Bed <dbl>, Emp <dbl>, EmpR <dbl>,\n#   EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>, and\n#   abbreviated variable names ¹​avg_wage, ²​deposite\n\n\n\n\nPerforming Relational Join\nThe code chunk below will be used to update the attribute table of hunan sf dataframe with the attribute fields of hunan2012 dataframe. This is performed using the left_join() of dplyr package.\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\"\n\nhead(hunan)\n\nSimple feature collection with 6 features and 35 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675..."
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#visualising-regional-development-indicator",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#visualising-regional-development-indicator",
    "title": "In-class Exercise 1",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nNow, we will prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text('NAME_3', size=0.4)\n\ngdppc <- qtm(hunan, fill='GDPPC')\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#computing-contiguity-spatial-weights",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#computing-contiguity-spatial-weights",
    "title": "In-class Exercise 1",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nIn this section, we will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. This function has a “queen” argument that takes TRUE or FALSE as options. If we do not specify this argument the default is set to TRUE, that is, if we don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nComputing QUEEN contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix. The summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbour.\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nFor each polygon in our polygon object, wm_q lists all neighbouring polygons. For example, to see the neighbours for the first polygon, we use the below code. It shows that Polygon 1 has 5 neighbours. The numbers represent the polygon IDs as stored in Hunan sf dataframe.\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nWe can retreive the county name of Polygon ID=1 using the code chunk below.\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo reveal the county names of the five neighbouring polygons, we use the code chunk below.\n\nhunan$County[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retreive the GDPPC of these five countries by using the code chunk below. The printed output shows that the GDPPC of the five nearest neighbours of Anxiang based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nComputing ROOK contiguity based neighbours\nThe code chunk below is used to compute ROOK contiguity weight matrix. The summary report shows that there are 88 area units in Hunan. The most connected area unit has 10 neighbours. There are two area units with only one neighbour.\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\nVisualising Contiguity Weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs.\nGetting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object. We need the coordinates in a separate dataframe for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of hunan. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of hunan and access the longitude value of the centroid through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude of the centroid with one key difference, We access the second value of each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have longitude and latitude, we use cbind to put them into the same object.\n\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nPlotting Queen Contiguity Based Neighbours Map\nThe arguments pch refers to the plotting symbol, cex for the symbol size and add=TRUE means to add to current plot.\n\nplot(hunan$geometry, border='lightgrey')\nplot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col='red')\n\n\n\n\nPlotting Rook Contiguity Based Neighbours Map\n\nplot(hunan$geometry, border='lightgrey')\nplot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col='red')\n\n\n\n\nPlotting both Queen and Rook Contiguity Based Neighbours Maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border='lightgrey')\nplot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col='red', main='Queen Contiguity')\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col='red', main='Rook Contiguity')"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#computing-distance-based-neighbours",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#computing-distance-based-neighbours",
    "title": "In-class Exercise 1",
    "section": "Computing Distance Based Neighbours",
    "text": "Computing Distance Based Neighbours\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package. The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nDetermining the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat=TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below. We input coords as the matrix of point coordinates, 0 as the lower distance boud and 62 as the upper distance bound.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat=TRUE)\nsummary(wm_d62)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\n\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep. It displays the number of links each County has.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\n\nPlotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the code chunk below. The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\n\nplot(hunan$geometry, border='lightgrey')\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col='red', length=0.08)\n\n\n\n\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border='lightgrey')\nplot(k1, coords, add=TRUE, col='red', length=0.08, main='1st nearest neighbours')\nplot(hunan$geometry, border='lightgrey')\nplot(wm_d62, coords, add=TRUE, pch=19, cex=0.6, main='Distance link')\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below. (Note: Where in the previous example, we set a lower and upper bound distance, in this example, we impose 6 neighbours for every County).\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n\nPlotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border='lightgrey')\nplot(knn6, coords, pch=19, cex=0.6, add=TRUE, col='red')"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#weight-based-on-inversed-distance-method-idw",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#weight-based-on-inversed-distance-method-idw",
    "title": "In-class Exercise 1",
    "section": "Weight based on Inversed Distance method (IDW)",
    "text": "Weight based on Inversed Distance method (IDW)\nFirst, we will compute the distances between areas using nbdists() of spdep. (Note: Recall that wm_q is our weight matrix computed based on Queen continuity method)\n\ndist <- nbdists(wm_q, coords, longlat=TRUE)\nidw <- lapply(dist, function(x) 1/(x))\nidw\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\n\nrswm_q <- nb2listw(wm_q, style='W', zero.policy=TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nTo see the weight of the first polygon, we use the following code chunk. Each neighbour is assigned a 0.2 of the total weight. This means that when R computes the average neighbouring income values, each neighbour’s income will be multiplied by 0.2 before being tallied.\n\nrswm_q$weights[1]\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below. This time we add an additional argument glist referring to the list of general weights corresponding to neighbours and set it to idw, and we use style=‘B’, which stands for basic binary coding.\n\nrswm_idw <- nb2listw(wm_q, glist=idw, style='B', zero.policy=TRUE)\nrswm_idw\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nTo see the weight of the first polygon, we use the following code chunk.\n\nrswm_idw$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_idw$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "in-class_exercises/in-class_ex1/in-class_ex1.html#application-of-spatial-weight-matrix",
    "href": "in-class_exercises/in-class_ex1/in-class_ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nThere are four different spatial lagged variables, as follows:\n\nspatial lag with row-standardized weights (taking weighted average of neighbours),\nspatial lag as a sum of neighbouring values (taking sum of neighbours),\nspatial window average (taking weighted average of neighbours and include itself),\nand spatial window sum (taking sum of neighbours and include itself).\n\n\nSpatial Lag with row-standardised weights\nUsing the row-standardised weights matrix obtained in the previous section, we can compute the average neighbour GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\ngdppc.lag <- lag.listw(rswm_q, hunan$GDPPC)\ngdppc.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecall that in previous sections, we retrieved the GDPPC using the code chunk below. The spatially-lagged GDPPC value of the first polygon (24847.20) is computed using the row-standardised weights of each neighbour (0.2) multiplied by the GDPPC values of each of its neighbours.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto the Hunan sf dataframe using the code chunk below.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c('NAME_3', 'lag GDPPC')\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe following table shows the average neighboring income values (stored under lag GDPPC) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm(hunan, 'GDPPC')\nlag_gdppc <- qtm(hunan, 'lag GDPPC')\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial Lag as a sum of neighbouring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbours list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q,\n                       glist=b_weights,\n                       style='B')\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variables from our weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res_sum <- as.data.frame(lag_sum)\ncolnames(lag.res_sum) <- c('NAME_3', 'lag_sum GDPPC')\nlag.res_sum\n\n          NAME_3 lag_sum GDPPC\n1        Anxiang        124236\n2        Hanshou        113624\n3         Jinshi         96573\n4             Li        110950\n5          Linli        109081\n6         Shimen        106244\n7        Liuyang        174988\n8      Ningxiang        235079\n9      Wangcheng        273907\n10         Anren        256221\n11       Guidong         98013\n12         Jiahe        104050\n13         Linwu        102846\n14       Rucheng         92017\n15       Yizhang        133831\n16      Yongxing        158446\n17        Zixing        141883\n18     Changning        119508\n19      Hengdong        150757\n20       Hengnan        153324\n21      Hengshan        113593\n22       Leiyang        129594\n23        Qidong        142149\n24        Chenxi        100119\n25     Zhongfang         82884\n26       Huitong         74668\n27      Jingzhou         43184\n28        Mayang         99244\n29       Tongdao         46549\n30      Xinhuang         20518\n31          Xupu        140576\n32      Yuanling        121601\n33      Zhijiang         92069\n34 Lengshuijiang         43258\n35    Shuangfeng        144567\n36        Xinhua        132119\n37       Chengbu         51694\n38        Dongan         59024\n39       Dongkou         69349\n40       Longhui         73780\n41      Shaodong         94651\n42       Suining        100680\n43        Wugang         69398\n44       Xinning         52798\n45       Xinshao        140472\n46      Shaoshan        118623\n47    Xiangxiang        180933\n48       Baojing         82798\n49     Fenghuang         83090\n50       Guzhang         97356\n51       Huayuan         59482\n52        Jishou         77334\n53      Longshan         38777\n54          Luxi        111463\n55      Yongshun         74715\n56         Anhua        174391\n57           Nan        150558\n58     Yuanjiang        122144\n59      Jianghua         68012\n60       Lanshan         84575\n61      Ningyuan        143045\n62     Shuangpai         51394\n63       Xintian         98279\n64       Huarong         47671\n65      Linxiang         26360\n66         Miluo        236917\n67     Pingjiang        220631\n68      Xiangyin        185290\n69          Cili         64640\n70       Chaling         70046\n71        Liling        126971\n72       Yanling        144693\n73           You        129404\n74       Zhuzhou        284074\n75       Sangzhi        112268\n76       Yueyang        203611\n77        Qiyang        145238\n78      Taojiang        251536\n79      Shaoyang        108078\n80      Lianyuan        238300\n81     Hongjiang        108870\n82      Hengyang        108085\n83       Guiyang        262835\n84      Changsha        248182\n85       Taoyuan        244850\n86      Xiangtan        404456\n87           Dao         67608\n88     Jiangyong         33860\n\n\nRecall that in previous sections, we retrieved the GDPPC using the code chunk below. The spatially-lagged GDPPC value as a sum of neighbouring values of the first polygon (124236) is computed using the sum of the GDPPC values of each of its neighbours.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nNext, we will append the lag_sum GDPPC field into Hunan sf data frame by using the code chunk below.\n\nhunan <- left_join(hunan, lag.res_sum)\n\nJoining, by = \"NAME_3\"\n\n\nNow, we can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm(hunan, 'GDPPC')\nlag_sum_gdppc <- qtm(hunan, 'lag_sum GDPPC')\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial Window Average\nThe spatial window average uses row-standardized weights and includes the diagonal element (includes the county itself). To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights. To begin we assign wm_q to a new variable because we will directly alter its structure to add the diagonal elements.\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_q1 <- include.self(wm_q1)\n\nNow we obtain weights with nb2listw(). Default style is ‘W’, which is the row standardised weights.\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nWe can see that the county itself is now included and the weights are distributed among the neighbours and itself.\n\nwm_q1$weights\n\n[[1]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[2]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[3]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[4]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[5]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[6]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[7]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[8]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[9]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[10]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\n[[11]]\n[1] 0.25 0.25 0.25 0.25\n\n[[12]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[13]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[14]]\n[1] 0.25 0.25 0.25 0.25\n\n[[15]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[16]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[17]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[18]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[19]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[20]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[21]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[22]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[23]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[24]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[25]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[26]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[27]]\n[1] 0.25 0.25 0.25 0.25\n\n[[28]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[29]]\n[1] 0.25 0.25 0.25 0.25\n\n[[30]]\n[1] 0.5 0.5\n\n[[31]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\n[[32]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\n[[33]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[34]]\n[1] 0.25 0.25 0.25 0.25\n\n[[35]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[36]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[37]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[38]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[39]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[40]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[41]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[42]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[43]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[44]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[45]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[46]]\n[1] 0.25 0.25 0.25 0.25\n\n[[47]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[48]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[49]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[50]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[51]]\n[1] 0.25 0.25 0.25 0.25\n\n[[52]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[53]]\n[1] 0.25 0.25 0.25 0.25\n\n[[54]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[55]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[56]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[57]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[58]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[59]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[60]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[61]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[62]]\n[1] 0.25 0.25 0.25 0.25\n\n[[63]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[64]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[65]]\n[1] 0.5 0.5\n\n[[66]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[67]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[68]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[69]]\n[1] 0.25 0.25 0.25 0.25\n\n[[70]]\n[1] 0.25 0.25 0.25 0.25\n\n[[71]]\n[1] 0.25 0.25 0.25 0.25\n\n[[72]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[73]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[74]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[75]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[76]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[77]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[78]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[79]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[80]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\n[[81]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[82]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[83]]\n [1] 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n\n[[84]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[85]]\n [1] 0.08333333 0.08333333 0.08333333 0.08333333 0.08333333 0.08333333\n [7] 0.08333333 0.08333333 0.08333333 0.08333333 0.08333333 0.08333333\n\n[[86]]\n [1] 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n\n[[87]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[88]]\n[1] 0.3333333 0.3333333 0.3333333\n\nattr(,\"mode\")\n[1] \"binary\"\nattr(,\"W\")\n[1] TRUE\nattr(,\"comp\")\nattr(,\"comp\")$d\n [1]  6  6  5  5  5  6  5  8  7  9  4  6  5  4  5  6  8  6  7  8  6  6  8  6  6\n[26]  5  4  6  4  2  9  9  6  4  7  7  5  5  6  7  7  8  7  5  7  4  6  6  5  6\n[51]  4  6  4  7  6  8  7  6  5  5  8  4  5  3  2  6  5  6  4  4  4  6  6  7  7\n[76]  8  8  8  8  9  7  6 10  7 12 10  5  3\n\n\nLastly, we need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nWe will convert the lag variable listw object into a dataframe by using as.data.frame().\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag.res_wm_q1 <- as.data.frame(lag.list.wm_q1)\ncolnames(lag.res_wm_q1) <- c('NAME_3', 'lag_window_avg GDPPC')\nhunan <- left_join(hunan, lag.res_wm_q1)\n\nJoining, by = \"NAME_3\"\n\n\nWe can examine the dataframe using the code chunk below.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 38 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n  lag_sum GDPPC lag_window_avg GDPPC                       geometry\n1        124236             24650.50 POLYGON ((112.0625 29.75523...\n2        113624             22434.17 POLYGON ((112.2288 29.11684...\n3         96573             26233.00 POLYGON ((111.8927 29.6013,...\n4        110950             27084.60 POLYGON ((111.3731 29.94649...\n5        109081             26927.00 POLYGON ((111.6324 29.76288...\n6        106244             22230.17 POLYGON ((110.8825 30.11675...\n\n\nLastly, we plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, 'GDPPC')\nw_avg_gdppc <- qtm(hunan, 'lag_window_avg GDPPC')\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial Window Sum\nThe spatial window sum is the counterpart of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_q1 <- include.self(wm_q1)\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 <- nb2listw(wm_q1,\n                       glist=b_weights,\n                       style='B')\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith out new weight structure, we can compute the lag variable with lag.listw().\n\nlag.list_w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res_w_sum_gdppc <- as.data.frame(lag.list_w_sum_gdppc)\ncolnames(lag.res_w_sum_gdppc) <- c('NAME_3', 'w_sum GDPPC')\nhunan <- left_join(hunan, lag.res_w_sum_gdppc)\n\nJoining, by = \"NAME_3\"\n\nhead(hunan)\n\nSimple feature collection with 6 features and 39 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n  lag_sum GDPPC lag_window_avg GDPPC w_sum GDPPC                       geometry\n1        124236             24650.50      147903 POLYGON ((112.0625 29.75523...\n2        113624             22434.17      134605 POLYGON ((112.2288 29.11684...\n3         96573             26233.00      131165 POLYGON ((111.8927 29.6013,...\n4        110950             27084.60      135423 POLYGON ((111.3731 29.94649...\n5        109081             26927.00      134635 POLYGON ((111.6324 29.76288...\n6        106244             22230.17      133381 POLYGON ((110.8825 30.11675...\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, 'GDPPC')\nw_sum_gdppc <- qtm(hunan, 'w_sum GDPPC')\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "This exercise covers the following:\n\nGlobal and Local Measures of Spatial Autocorrelation"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#getting-started",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the necessary packages\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#getting-the-data-into-r-environment",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2",
    "section": "Getting the Data into R Environment",
    "text": "Getting the Data into R Environment\n\nImporting shapefile\nThe following code chunk imports the Hunan shapefile as a simple features object of sf.\n\nhunan <- st_read(dsn=\"data/geospatial\",\n                 layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\hands-on_exercises\\hands-on_ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting csv file\nThe following code chunk imports the Hunan_2012.csv file as an R dataframe.\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below is used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\nVisualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n=5,\n          style=\"equal\") +\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title=\"Equal Interval Classification\",\n            main.title.size=1)\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n=5,\n          style=\"quantile\") +\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title=\"Equal Quantile Classification\",\n            main.title.size=1)\n\ntmap_arrange(equal, quantile, asp=1, ncol=2)"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#global-spatial-autocorrelation",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nIn this section, we will learn how to compute global spatial autocorrelation statistic and to perform spatial complete spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nWe will use the code chunk below to compute the Queen contiguity weight matrix. The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbour.\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\nRow-standardised Weights Matrix\nNext, we will assign weights to each neighbouring polygon using equal weights (style=“W”). This assigns the fraction of 1/(#ofneighbors) to each neighbouring county.\n\nrswm_q <- nb2listw(wm_q,\n                   style=\"W\",\n                   zero.policy=TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nstr(rswm_q)\n\nList of 3\n $ style     : chr \"W\"\n $ neighbours:List of 88\n  ..$ : int [1:5] 2 3 4 57 85\n  ..$ : int [1:5] 1 57 58 78 85\n  ..$ : int [1:4] 1 4 5 85\n  ..$ : int [1:4] 1 3 5 6\n  ..$ : int [1:4] 3 4 6 85\n  ..$ : int [1:5] 4 5 69 75 85\n  ..$ : int [1:4] 67 71 74 84\n  ..$ : int [1:7] 9 46 47 56 78 80 86\n  ..$ : int [1:6] 8 66 68 78 84 86\n  ..$ : int [1:8] 16 17 19 20 22 70 72 73\n  ..$ : int [1:3] 14 17 72\n  ..$ : int [1:5] 13 60 61 63 83\n  ..$ : int [1:4] 12 15 60 83\n  ..$ : int [1:3] 11 15 17\n  ..$ : int [1:4] 13 14 17 83\n  ..$ : int [1:5] 10 17 22 72 83\n  ..$ : int [1:7] 10 11 14 15 16 72 83\n  ..$ : int [1:5] 20 22 23 77 83\n  ..$ : int [1:6] 10 20 21 73 74 86\n  ..$ : int [1:7] 10 18 19 21 22 23 82\n  ..$ : int [1:5] 19 20 35 82 86\n  ..$ : int [1:5] 10 16 18 20 83\n  ..$ : int [1:7] 18 20 38 41 77 79 82\n  ..$ : int [1:5] 25 28 31 32 54\n  ..$ : int [1:5] 24 28 31 33 81\n  ..$ : int [1:4] 27 33 42 81\n  ..$ : int [1:3] 26 29 42\n  ..$ : int [1:5] 24 25 33 49 54\n  ..$ : int [1:3] 27 37 42\n  ..$ : int 33\n  ..$ : int [1:8] 24 25 32 36 39 40 56 81\n  ..$ : int [1:8] 24 31 50 54 55 56 75 85\n  ..$ : int [1:5] 25 26 28 30 81\n  ..$ : int [1:3] 36 45 80\n  ..$ : int [1:6] 21 41 47 80 82 86\n  ..$ : int [1:6] 31 34 40 45 56 80\n  ..$ : int [1:4] 29 42 43 44\n  ..$ : int [1:4] 23 44 77 79\n  ..$ : int [1:5] 31 40 42 43 81\n  ..$ : int [1:6] 31 36 39 43 45 79\n  ..$ : int [1:6] 23 35 45 79 80 82\n  ..$ : int [1:7] 26 27 29 37 39 43 81\n  ..$ : int [1:6] 37 39 40 42 44 79\n  ..$ : int [1:4] 37 38 43 79\n  ..$ : int [1:6] 34 36 40 41 79 80\n  ..$ : int [1:3] 8 47 86\n  ..$ : int [1:5] 8 35 46 80 86\n  ..$ : int [1:5] 50 51 52 53 55\n  ..$ : int [1:4] 28 51 52 54\n  ..$ : int [1:5] 32 48 52 54 55\n  ..$ : int [1:3] 48 49 52\n  ..$ : int [1:5] 48 49 50 51 54\n  ..$ : int [1:3] 48 55 75\n  ..$ : int [1:6] 24 28 32 49 50 52\n  ..$ : int [1:5] 32 48 50 53 75\n  ..$ : int [1:7] 8 31 32 36 78 80 85\n  ..$ : int [1:6] 1 2 58 64 76 85\n  ..$ : int [1:5] 2 57 68 76 78\n  ..$ : int [1:4] 60 61 87 88\n  ..$ : int [1:4] 12 13 59 61\n  ..$ : int [1:7] 12 59 60 62 63 77 87\n  ..$ : int [1:3] 61 77 87\n  ..$ : int [1:4] 12 61 77 83\n  ..$ : int [1:2] 57 76\n  ..$ : int 76\n  ..$ : int [1:5] 9 67 68 76 84\n  ..$ : int [1:4] 7 66 76 84\n  ..$ : int [1:5] 9 58 66 76 78\n  ..$ : int [1:3] 6 75 85\n  ..$ : int [1:3] 10 72 73\n  ..$ : int [1:3] 7 73 74\n  ..$ : int [1:5] 10 11 16 17 70\n  ..$ : int [1:5] 10 19 70 71 74\n  ..$ : int [1:6] 7 19 71 73 84 86\n  ..$ : int [1:6] 6 32 53 55 69 85\n  ..$ : int [1:7] 57 58 64 65 66 67 68\n  ..$ : int [1:7] 18 23 38 61 62 63 83\n  ..$ : int [1:7] 2 8 9 56 58 68 85\n  ..$ : int [1:7] 23 38 40 41 43 44 45\n  ..$ : int [1:8] 8 34 35 36 41 45 47 56\n  ..$ : int [1:6] 25 26 31 33 39 42\n  ..$ : int [1:5] 20 21 23 35 41\n  ..$ : int [1:9] 12 13 15 16 17 18 22 63 77\n  ..$ : int [1:6] 7 9 66 67 74 86\n  ..$ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n  ..$ : int [1:9] 8 9 19 21 35 46 47 74 84\n  ..$ : int [1:4] 59 61 62 88\n  ..$ : int [1:2] 59 87\n  ..- attr(*, \"class\")= chr \"nb\"\n  ..- attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n  ..- attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n  ..- attr(*, \"type\")= chr \"queen\"\n  ..- attr(*, \"sym\")= logi TRUE\n $ weights   :List of 88\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:8] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num 1\n  ..$ : num [1:8] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n  ..$ : num [1:8] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:2] 0.5 0.5\n  ..$ : num 1\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:3] 0.333 0.333 0.333\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:7] 0.143 0.143 0.143 0.143 0.143 ...\n  ..$ : num [1:8] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:5] 0.2 0.2 0.2 0.2 0.2\n  ..$ : num [1:9] 0.111 0.111 0.111 0.111 0.111 ...\n  ..$ : num [1:6] 0.167 0.167 0.167 0.167 0.167 ...\n  ..$ : num [1:11] 0.0909 0.0909 0.0909 0.0909 0.0909 ...\n  ..$ : num [1:9] 0.111 0.111 0.111 0.111 0.111 ...\n  ..$ : num [1:4] 0.25 0.25 0.25 0.25\n  ..$ : num [1:2] 0.5 0.5\n  ..- attr(*, \"mode\")= chr \"binary\"\n  ..- attr(*, \"W\")= logi TRUE\n  ..- attr(*, \"comp\")=List of 1\n  .. ..$ d: num [1:88] 5 5 4 4 4 5 4 7 6 8 ...\n - attr(*, \"class\")= chr [1:2] \"listw\" \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language nb2listw(neighbours = wm_q, style = \"W\", zero.policy = TRUE)\n\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nIn this section, we will learn how to perform Moran’s I statistics testing using moran.test() of spdep.\nMoran I statistic is 0.3007, with p-value less than 0.05. This means that there is sufficient evidence to support that the GDP of a county has a correlation coefficient of 0.3007 with its average neigbouring GDP value (also known as the lagging value).\n\nmoran.test(hunan$GDPPC,\n           listw=rswm_q,\n           zero.policy=TRUE,\n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nComputing Monte Carlo Moran’s I\nThe moran.test method above makes some restrictive assumptions about the data and thus cannot always be reliable. Another approach is a Monte Carlo test which makes no assumption about the dataset including the shape and layout of each polygon.\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulations will be performed.\nThe results show that pseudo p-value is 0.001. This pseudo p-value is computed using \\[\\frac{N_extreme + 1}{N+1}\\]\nwhere \\[N_extreme\\] is the number of simulated Moran’s I values more extreme than our observed statistic and N is the total number of simulations. Here, given a pseudo p-value of 0.001, it means that just 0.1 simulation result out of the 1000 simulations (as (0.1+1)/(1000+1) = 0.001) was more extreme than our observed Moran’s I statistic of 0.3007.\nThis means that our observed Moran’s I statistic of 0.3007 is not a value we would expect to compute if the variable of interest (i.e., GDPPC) were randomly distributed across each county. We can also interpret it as there is a 0.1% (0.001) probability that we would be wrong in rejecting the null hypothesis. Hence, we reject the null hypothesis that the variable of interest is randomly distributed.\n\nset.seed(1234)\nbperm_moran <- moran.mc(hunan$GDPPC,\n                  listw=rswm_q,\n                  nsim=999,\n                  zero.policy=TRUE,\n                  na.action=na.omit)\nbperm_moran\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the Monte Carlo simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram using hist() and abline() of R Graphics.\n\nmean(bperm_moran$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm_moran$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm_moran$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm_moran$res,\n     freq=TRUE,\n     breaks=20,\n     xlab=\"Simulated Moran's I\")\nabline(v=0, col=\"red\") # comparing to correlation coefficient of 0\n\n\n\n\n\n\nGlobal Spatial Autocorrelation: Geary’s C\nIn this section, you will learn how to perform Geary’s C statistics testing by using appropriate functions of spdep package.\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\nHere, we obatin a Geary C statistic of 0.6907, which can be interpreted as a mild positive spatial autocorrelation (Note: Computation of Geary’s C results in a value within the range of 0 to +2 . When we obtain a zero value, it is interpreted as a strong positive spatial autocorrelation (perfect correlation), a value of 1 indicates a random spatial pattern (no autocorrelation), and a value between 1 and 2 represents a negative spatial autocorrelation (2 is a perfect dispersion)). As p-value is less than 0.05, there is sufficient evidence that the spatial correlation exists.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\nGeary C statistic is 0.6907. Based on simulation, the pseudo p-value is 0.001, which is less than alpha 0.05. We thus have sufficient evidence evidence to reject the null hypothesis that the distribution is random.\n\nset.seed(1234)\nbperm_geary <- geary.mc(hunan$GDPPC,\n                  listw=rswm_q,\n                  nsim=999)\nbperm_geary\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualising Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm_geary$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm_geary$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm_geary$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm_geary$res, freq=TRUE, breaks=20,\n     xlab=\"Simulated Geary C\")\nabline(v=mean(bperm_geary$res), col=\"red\") # comparing to Geary C=1, which signifies random distribution"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#spatial-correlogram",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#spatial-correlogram",
    "title": "Hands-on Exercise 2",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in our data or model residuals. They show how correlated pairs of spatial observations are when we increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s C) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\nCompute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used is Moran’s I. The plot() of base Graph is then used to plot the output.\n\nmoran_corr <- sp.correlogram(wm_q, hunan$GDPPC,\n                             order=6,\n                             method=\"I\",\n                             style=\"W\")\nplot(moran_corr)\n\n\n\n\nPlotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(moran_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCompute Geary’s C correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used is Geary’s C. The plot() of base Graph is then used to plot the output.\n\ngeary_corr <- sp.correlogram(wm_q,\n                             hunan$GDPPC,\n                             order=6,\n                             method=\"C\",\n                             style=\"W\")\nplot(geary_corr)\n\n\n\n\nSimilar to previous step, we will print out the analysis report using the code chunk below.\n\nprint(geary_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#cluster-and-outlier-analysis",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators for Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city, local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’s I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\nCompute local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below is used to compute local Moran’s I of GDPPC at the county level.\n\nlocal_moran <- localmoran(hunan$GDPPC, rswm_q)\nhead(local_moran)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nThe code chunk below lists the contents of the local Moran matrix derived using printCoefmat().\n\nfips <- order(hunan$County) # returns vector of indices of county names in ascending order\nprintCoefmat(data.frame(local_moran[fips,], row.names=hunan$County[fips], check.names=FALSE))\n\n                       Ii        E.Ii      Var.Ii    Z.Ii Pr(z != E(Ii))    \nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -0.0725      0.9422301    \nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791      0.1391057    \nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -0.0663      0.9471636    \nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185      0.2230456    \nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  0.1293      0.8971056    \nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -0.0768      0.9387606    \nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590      0.0007822 ***\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895      0.1119416    \nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  0.6830      0.4946117    \nCili           7.3176e-02 -1.6747e-03  4.7902e-02  0.3420      0.7323546    \nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297      0.3031703    \nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159      0.1881947    \nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338      0.1023002    \nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  0.5120      0.6086619    \nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -0.9510      0.3415864    \nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305      0.3027630    \nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  0.7793      0.4357997    \nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  0.2627      0.7928094    \nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  0.1274      0.8986110    \nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  0.4629      0.6434065    \nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -0.2562      0.7978131    \nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  0.4349      0.6636633    \nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678      0.2855921    \nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -0.0475      0.9621124    \nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  0.5407      0.5887023    \nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  0.7969      0.4255374    \nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -0.5363      0.5917276    \nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204      0.3075618    \nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  0.7180      0.4727569    \nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759      0.2396152    \nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -0.0197      0.9843090    \nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543      0.1756424    \nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  0.4497      0.6529132    \nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  0.2342      0.8148123    \nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623      0.2451020    \nLi             1.0225e-03 -2.4048e-07  5.1060e-06  0.4526      0.6508382    \nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467      0.2952490    \nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335      0.0328837 *  \nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  0.3909      0.6959021    \nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -0.1768      0.8596957    \nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  0.1363      0.8915545    \nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972      0.0051555 ** \nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787      0.0376449 *  \nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690      0.1709996    \nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  0.9956      0.3194403    \nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  0.7166      0.4736044    \nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715      0.0003550 ***\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -0.1099      0.9125016    \nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274      0.0676458 .  \nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  0.7536      0.4511108    \nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698      3.049e-05 ***\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  0.7640      0.4448892    \nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  0.6771      0.4983276    \nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -0.7181      0.4726740    \nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  0.9797      0.3272227    \nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510      0.1467765    \nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583      0.0631298 .  \nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807      0.0928305 .  \nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -0.4773      0.6331568    \nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  0.0652      0.9480354    \nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  0.8536      0.3933400    \nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544      0.0636875 .  \nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002      0.0357113 *  \nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  0.5090      0.6107279    \nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582      0.2899569    \nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873      0.0001014 ***\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935      0.0282749 *  \nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213      1.551e-05 ***\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092      0.0704213 .  \nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539      0.0507157 .  \nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  0.4241      0.6715036    \nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  0.2667      0.7897221    \nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502      0.1210854    \nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  0.1929      0.8470456    \nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -0.0068      0.9945429    \nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726      0.1698803    \nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -0.6867      0.4922880    \nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202      0.2223756    \nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795      0.1390190    \nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409      0.2538993    \nYou            7.8750e-02 -7.2728e-03  1.2116e-01  0.2471      0.8048036    \nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  0.0069      0.9944802    \nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121      0.0699726 .  \nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  0.8608      0.3893219    \nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  0.9221      0.3564539    \nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855      0.2358293    \nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688      0.0001094 ***\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -0.7014      0.4830289    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nMapping local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. local_moran) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The output SpatialPolygonDataFrame is called hunan.local_moran.\n\nhunan.local_moran <- cbind(hunan, local_moran) %>% \n  rename(Pr.Ii = Pr.z....E.Ii..) # rename the p-value col as it will change to wierd str after combining\n\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\nlocal_moran_map <- tm_shape(hunan.local_moran) +\n  tm_fill(col=\"Ii\",\n          style=\"pretty\",\n          palette=\"RdBu\",\n          title=\"Local Moran Statistics\") +\n  tm_borders(alpha=0.5)\nlocal_moran_map\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth map shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values. The code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\nlocal_moran_pvalue <- tm_shape(hunan.local_moran) +\n  tm_fill(col=\"Pr.Ii\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\",\n          title=\"Local Moran's I p-values\") +\n  tm_borders(alpha=0.5)\nlocal_moran_pvalue\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other. The code chunk below will be used to create such visualisation.\n\ntmap_arrange(local_moran_map, local_moran_pvalue,\n             asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#creating-a-lisa-cluster-map",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations colour-coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep. Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County),\n                  xlab=\"GDPPC 2012\",\n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to center and scale the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$GDPPC <- scale(hunan$GDPPC) %>% as.vector\n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe. Now, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County),\n                  xlab=\"z-GDPPC 2012\",\n                  ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\nFirst, we create a vector of zeros with the same length as local_moran.\n\nquadrant <- vector(mode=\"numeric\", length=nrow(local_moran))\n\nNext, we derive the spatially lagged variable of interest (i.e., GDPPC) and center it around the mean. If DV > 0, the GDPCC of the county is higher compared to the mean of its neighbours.\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)\n\nThis is followed by centering the local Moran’s around the mean.\n\nC_moran <- local_moran[,1] - mean(local_moran[,1])\n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories. DV defines whether the value of the variable of interest (i.e., GDPPC) is high or low, whereas c_moran defines whether it is similar to its neighbours.\n\nquadrant[DV <0 & C_moran>0] <- 1 \nquadrant[DV >0 & C_moran<0] <- 2\nquadrant[DV <0 & C_moran<0] <- 3  \nquadrant[DV >0 & C_moran>0] <- 4  \n\nLastly, we further reassign non-significant Moran into category 0.\n\nquadrant[local_moran[,5]>signif] <- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.local_moran$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.local_moran) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\nLISAmap\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other. The code chunk below will be used to create such visualisation.\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)\n\nVariable(s) \"GDPPC\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas. The term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroid\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermining the cut-off distance\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat=TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat=TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object. The output spatial weights object is called wm62_lw.\n\nwm62_lw <- nb2listw(wm_d62, style=\"B\")\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style=\"B\")\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#computing-gi-statistics",
    "href": "hands-on_exercises/hands-on_ex2/hands-on_ex2.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix. The output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below. This code chunk performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>% \n  rename(gstat_fixed=as.matrix.gi.fixed.)\n\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"GDPPC\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nGi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values. The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"GDPPC\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html",
    "href": "assignments/assignment_ex1/assignment_ex1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Water is an important resource to mankind. Yet over 40% of the global population does not have access to sufficient clean water. Developing countries especially are most affected by water shortages and poor water quality.\nThe purpose of this project is to apply appropriate global and local measures of spatial association techniques to reveal the spatial patterns of Non Functional water points in Nigeria.\nMore background on the study and the data sources can be found here."
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#getting-started",
    "href": "assignments/assignment_ex1/assignment_ex1.html#getting-started",
    "title": "Assignment 1",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the required packages.\n\npacman::p_load(tidyverse, sf, spdep, tmap, funModeling)"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#importing-data",
    "href": "assignments/assignment_ex1/assignment_ex1.html#importing-data",
    "title": "Assignment 1",
    "section": "Importing Data",
    "text": "Importing Data\nThere are two geospatial datsets that will be used, they are:\n\ngeo_export: water point geospatial data in rural areas from Water Point Data Exchange (WPdx)\nnga_admbnda_adm2_osgof_20190417: nigeria Level-2 admin boundary polygon GIS data\n\n\nImporting Water Point Geospatial Data\nWe will read in the geo_export data and extract out only the rows relating to Nigeria, which is the country of interest for our study.\n\nwp <- st_read(dsn = \"data\",\n              layer = \"geo_export\",\n              crs = 4326) %>% \n  filter(clean_coun == \"Nigeria\")\n\nNext, we save the extracted sf data table (i.e., wp) into an output file in rds data format. For subsequent analysis, we can just load this extracted file.\n\nwrite_rds(wp, \"data/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA Boundary Data\nNext, we will import the LGA boundary data.\n\nnga <- st_read(dsn = \"data\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#data-wrangling",
    "href": "assignments/assignment_ex1/assignment_ex1.html#data-wrangling",
    "title": "Assignment 1",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecoding NA values into strings\nIn the code chunk below, replace_na() is used to recode all NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>% \n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\nExtracting Water Point Data\nWe want to examine the different classes of status_cle in our water point data. To get a quick view of the distribution, we use freq() from funModeling package.\n\nfreq(data = wp_nga, input = \"status_cle\")\n\nThen, we will extract the water point data into three different dataframes based on functional, non-functional and unknown class.\n\nwp_functional <- wp_nga %>% \n  filter(status_cle %in% c(\"Functional\",\n                           \"Functional but needs repair\",\n                           \"Functional but not in use\"))\n\nwp_nonfunctional <- wp_nga %>% \n  filter(status_cle %in% c(\"Non-Functional\",\n                           \"Non-Functional due to dry season\",\n                           \"Abandoned/Decommissioned\",\n                           \"Abandoned\",\n                           \"Non functional due to dry season\"))\n\nwp_unknown <- wp_nga %>% \n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#performing-point-in-polygon-count",
    "href": "assignments/assignment_ex1/assignment_ex1.html#performing-point-in-polygon-count",
    "title": "Assignment 1",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\nWe want to find out how many water points from each class are there in each admin boundary in Nigeria. Using st_intersects(), it will return a list of the indexes of water points found in each admin boundary, then we use lengths() to obtain the number of water points and add the value to the newly created columns.\n(Note that st_intersects(points, polygon) will return TRUE/FALSE on each of the points, whereas st_intersects(polygon_points) will return the indexes of the points that fall inside each polygon. We should also not confuse with st_intersection(x, y), which is another function that returns the a geometry object that has the same class as the first argument (x), e.g., it can be used to return a polygon geometry of the intersection between two polygons.)\n\nnga_wp <- nga %>% \n  mutate(total_wp = lengths(st_intersects(nga, wp_nga))) %>% \n  mutate(total_wp_functional = lengths(st_intersects(nga, wp_functional))) %>% \n  mutate(total_wp_nonfunctional = lengths(st_intersects(nga, wp_nonfunctional))) %>% \n  mutate(total_wp_unknown = lengths(st_intersects(nga, wp_unknown)))"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#saving-the-analytical-data-table",
    "href": "assignments/assignment_ex1/assignment_ex1.html#saving-the-analytical-data-table",
    "title": "Assignment 1",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\nWe further wrangle the data table to derive two fields namely pct_functional and pct_nonfunctional. To keep the file size small, we select relevant fields from the data table and save them separately. For subsequently analysis, we will only need to use this extracted dataset (i.e., nga_wp.rds and can remove all other raw datasets.\n\nnga_wp <- nga_wp %>% \n  mutate(pct_functional = total_wp_functional/total_wp) %>% \n  mutate(pct_nonfunctional = total_wp_nonfunctional/total_wp) %>% \n  select(ADM2_EN, ADM2_PCODE, ADM1_PCODE, ADM0_EN, total_wp, total_wp_functional,\n         total_wp_nonfunctional, total_wp_unknown, pct_functional,\n         pct_nonfunctional)\n\nwrite_rds(nga_wp, \"data/nga_wp.rds\")"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#visualising-the-spatial-distribution-of-water-points",
    "href": "assignments/assignment_ex1/assignment_ex1.html#visualising-the-spatial-distribution-of-water-points",
    "title": "Assignment 1",
    "section": "Visualising the spatial distribution of water points",
    "text": "Visualising the spatial distribution of water points\n\nnga_wp <- read_rds(\"data/nga_wp.rds\") %>% \n  rename(\"wp_func\" = \"total_wp_functional\",\n         \"wp_nonfunc\" = \"total_wp_nonfunctional\",\n         \"wp_unknown\" = \"total_wp_unknown\")\n\n\ntm_shape(nga_wp) +\n  tm_polygons(col = c(\"total_wp\", \"wp_func\", \"wp_nonfunc\", \"wp_unknown\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            main.title = \"Spatial Distribution of Water Points in Nigeria\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            asp = 2)"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#importing-water-point-geospatial-data",
    "href": "assignments/assignment_ex1/assignment_ex1.html#importing-water-point-geospatial-data",
    "title": "Assignment 1",
    "section": "Importing Water Point Geospatial Data",
    "text": "Importing Water Point Geospatial Data\nWe will read in the geo_export data and extract out only the rows relating to Nigeria, which is the country of interest for our study.\n\nwp <- st_read(dsn = \"data\",\n              layer = \"geo_export\",\n              crs = 4326) %>% \n  filter(clean_coun == \"Nigeria\")\n\nNext, we save the extracted sf data table (i.e., wp) into an output file in rds data format. For subsequent analysis, we can just load this extracted file.\n\nwrite_rds(wp, \"data/wp_nga.rds\")"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#importing-nigeria-lga-boundary-data",
    "href": "assignments/assignment_ex1/assignment_ex1.html#importing-nigeria-lga-boundary-data",
    "title": "Assignment 1",
    "section": "Importing Nigeria LGA Boundary Data",
    "text": "Importing Nigeria LGA Boundary Data\nNext, we will import the LGA boundary data.\n\nnga <- st_read(dsn = \"data\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#recoding-na-values-into-strings",
    "href": "assignments/assignment_ex1/assignment_ex1.html#recoding-na-values-into-strings",
    "title": "Assignment 1",
    "section": "Recoding NA values into strings",
    "text": "Recoding NA values into strings\nIn the code chunk below, replace_na() is used to recode all NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>% \n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#extracting-water-point-data",
    "href": "assignments/assignment_ex1/assignment_ex1.html#extracting-water-point-data",
    "title": "Assignment 1",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nWe want to examine the different classes of status_cle in our water point data. To get a quick view of the distribution, we use freq() from funModeling package.\n\nfreq(data = wp_nga, input = \"status_cle\")\n\nThen, we will extract the water point data into three different dataframes based on functional, non-functional and unknown class.\n\nwp_functional <- wp_nga %>% \n  filter(status_cle %in% c(\"Functional\",\n                           \"Functional but needs repair\",\n                           \"Functional but not in use\"))\n\nwp_nonfunctional <- wp_nga %>% \n  filter(status_cle %in% c(\"Non-Functional\",\n                           \"Non-Functional due to dry season\",\n                           \"Abandoned/Decommissioned\",\n                           \"Abandoned\",\n                           \"Non functional due to dry season\"))\n\nwp_unknown <- wp_nga %>% \n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#creating-spatial-neighbours-using-contiguity-method-queen",
    "href": "assignments/assignment_ex1/assignment_ex1.html#creating-spatial-neighbours-using-contiguity-method-queen",
    "title": "Assignment 1",
    "section": "Creating Spatial Neighbours using Contiguity Method (Queen)",
    "text": "Creating Spatial Neighbours using Contiguity Method (Queen)\nWe will first explore the use of contiguity method for defining of neighbours. For this study, we will use the Queen’s case for defining the shared boundaries (refer figure below).\n\nWe will use the function poly2nb() of spdep package to build the neighbours list nb object based on Queen contiguity method.\n\nnb_queen <- poly2nb(nga_wp, queen=TRUE)\nsummary(nb_queen)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nThe summary report above shows that there are 774 areal units in Nigeria. Using the Queen contiguity method, the areal units have a range of neighbours between 0 and 14, with an average of 5.7 neighbours and most areal units having between 4 and 7 neighbours. Notably, one areal unit [86] has no links (likely an isolated region that does not share boundary with the other regions). This might be an issue for subsequent analysis.\nWe can find out more about this areal unit [86] based on its index using the code chunk below. From the results, we know that this region is named Bakassi. It is however not visible on the map.\n\n# Extract region without neighbour\nreg_without_neighbour <- nga_wp[86,]\nprint(reg_without_neighbour$ADM2_EN)\n\n[1] \"Bakassi\"\n\n# Plot the region in map\nqtm(nga_wp) + qtm(reg_without_neighbour, fill = \"red\")\n\n\n\n\nSimilarly, we can examine the areal unit [508] with the most neighbours. This region is named Mokwa and while it is not the biggest area geographically, its long shape likely contributed to it sharing boundaries with many other regions.\n\n# Extract region with max neighbours (14)\nreg_max_neighbour <- nga_wp[508,]\nprint(reg_max_neighbour$ADM2_EN)\n\n[1] \"Mokwa\"\n\n# Plot the region in map\nqtm(nga_wp) + qtm(reg_max_neighbour, fill = \"green\")"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#creating-spatial-neighbours-using-distance-based-method",
    "href": "assignments/assignment_ex1/assignment_ex1.html#creating-spatial-neighbours-using-distance-based-method",
    "title": "Assignment 1",
    "section": "Creating Spatial Neighbours using Distance-Based Method",
    "text": "Creating Spatial Neighbours using Distance-Based Method\nNext we will explore the use of distance-based methods for defining of neighbours. The first step of computing distance-based neighbours is to calculate the centroid coordinates of each aerial unit polygon. It is useful for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nThereafter, there are two different approaches of the distance-based method:\n\nFixed Distance - Some areas like the rural areas might be more sparse than the urban areas, resulting in them having more neighbours based on the fixed distance method, leading to potential large estimate variances. We will need to ensure that all features should have at least one neighbour.\nAdaptive Distance - Chooses the k nearest points as neighbour and hence ensures that each areal unit has a minimum number of neighbours for analysis. Effective when the values associated with our features are skewed (hence each features should be evaluated with a minimum number of neighbours) or when the distribution of our data varies across the study area such that some regions are further away from others.\n\n\nTransformation to Projected Coordinate System\nFirst, we check the coordinate reference system of our data. The crs is currently in EPSG: 4326.\n\nst_crs(nga_wp)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nWe will convert to Projected Coordinate Systems of Nigeria for the subsequent steps in our distance-based method. There are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. For this study, we will use EPSG: 26391.\n\nnga_wp_projected <- st_transform(nga_wp, crs=26391)\nst_crs(nga_wp_projected)\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n\n\nComputing Centroids of Each Aerial Unit Polygon\nTo compute the centroid of each areal unit polygon, we use map_dbl() from purrr package and st_centroid() from sf package.\n\nlongitude <- map_dbl(nga_wp_projected$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(nga_wp_projected$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude  latitude\n[1,]  549364.0  123694.9\n[2,]  547123.4  120376.5\n[3,] 1189496.9 1059770.9\n[4,]  489057.4  534262.6\n[5,]  593718.2  113824.1\n[6,]  642618.7  251222.3\n\n\n\n\nCreating Spatial Neighbours using Fixed Distance Method\nWith the centroids computed, we can now create spatial neighbours using the distance-based method. First, we will explore the fixed distance method.\nThe following functions will be used:\n\nknearneigh() of spdep which returns a matrix with the indices of points belonging to the set of the k nearest neighbours of each other\nknn2nb() which converts the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids\nnbdists() of spdep to calculate a list of vectors of distances corresponding to the neighbour object. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise\nunlist() for removal of the list structure of the returned object.\ndnearneigh() of spdep package to find an neighbours based on an interpoint distance\n\nTo ensure that each region is linked to at least one neighbour, we will calculate a list of vectors of distances corresponding to the first neighbour object (i.e., k=1). Then using the maximum value value in the list of distances as our upper threshold gives certainty that all units will have at least one neighbour (as compared to setting an arbitrary distance value as upper threshold).\nThe summary report below shows that the largest first nearest neighbour distance is 72139m, so we will use this as our upper threshold distance.\n\nnb_dist_k1 <- knn2nb(knearneigh(coords, k=1))\nk1dists <- unlist(nbdists(nb_dist_k1, coords))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2669   12834   20304   22084   27783   72139 \n\n\nThe following code chunk computes the fixed distance neighbours.\n\nnb_dist_fixed <- dnearneigh(coords, 0, 72139)\nsummary(nb_dist_fixed)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18130 \nPercentage nonzero weights: 3.026327 \nAverage number of links: 23.42377 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  9 11 22 32 35 33 34 29 35 27 18 21 23 16 12 12 11 16 17 16 10 14 10  5 13 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  5 15 13 12  7 10  8 12  5 12 17 14  9 10  4  5  3  7  6 11  8  5  5  4  2 \n53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 70 \n 3  3  6  3  5  6  2  5  5  8  6  6  4  3  1  1 \n5 least connected regions:\n90 112 123 237 670 with 1 link\n1 most connected region:\n585 with 70 links\n\n\nThe summary report above shows that there are 774 areal units in Nigeria. Using the fixed distance method, the areal units have a range of neighbours between 1 and 70. This is a big variation of the number of neighbours.\n\n\nCreating Spatial Neighbours using Adaptive Distance Method\nBased on the contiguity method used in the previous section, the areal units have an average of 5.7 neighbours, with the majority between the range of 4 and 7 neighbours. Using this as a reference, we will use k=6 for our adaptive distance method, i.e., choosing the 6 nearest points as neighbours. Using the adaptive distance method, all regions will have 6 neighbours.\n\nnb_dist_k6 <- knn2nb(knearneigh(coords, k=6))\nnb_dist_k6\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4644 \nPercentage nonzero weights: 0.7751938 \nAverage number of links: 6 \nNon-symmetric neighbours list"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#visualising-neighbours",
    "href": "assignments/assignment_ex1/assignment_ex1.html#visualising-neighbours",
    "title": "Assignment 1",
    "section": "Visualising Neighbours",
    "text": "Visualising Neighbours\nWe can do a visualisation of the neighbours based on Queen contiguity method, fixed distance method and adaptive distance method. However, as the regions are too numerous, the visualisations have limited utility in this study.\n\nNeighbours from Queen Contiguity Method\n\nplot(nga_wp_projected$geometry, border=\"lightgrey\")\nplot(nb_queen, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\nNeighbours from Fixed Distance Method\n\nplot(nga_wp_projected$geometry, border=\"lightgrey\")\nplot(nb_dist_fixed, coords, add=TRUE)\nplot(nb_dist_k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\nNeighbours from Adaptive Distance Method\n\nplot(nga_wp_projected$geometry, border=\"lightgrey\")\nplot(nb_dist_k6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "assignments/assignment_ex1/assignment_ex1.html#determining-the-spatial-neighbours-to-use",
    "href": "assignments/assignment_ex1/assignment_ex1.html#determining-the-spatial-neighbours-to-use",
    "title": "Assignment 1",
    "section": "Determining the Spatial Neighbours to use",
    "text": "Determining the Spatial Neighbours to use\nTo recap, we have explored three ways to build the spatial neighbours, specifically the Queen contiguity method, fixed distance method and adaptive distance method.\nThe Queen contiguity method resulted in one region (Bakassi) having no links at all and is hence not suitable for this geographical study.\nThe fixed distance method resulted in regions having a very large range of the number of neighbours (between 1 and 70). This is indicative that the regions could have a large variation in sizes (hence distance from centroid) and large variation in density. This might not be a suitable method for this geographical study.\nWe will choose the adaptive distance method (with k=6) for the purpose of this study as it is the most reasonable based on the geographical distribution of this study. All regions will have 6 neighbours for our evaulation and analysis.\nSubsequent steps:\n\nSpatial Neighbours\n\nDefine which are neighbours (choosing the neighbour criterion)\n\nContinuity Spatial Weights Method\n\nQUEEN method using poly2nb(sf, queen=TRUE)\nROOK method using poly2nb(sf, queen=FALSE)\n\n\nDistance-based Method\n\nCompute the centroid coordinates of the areas using:\n\nlongitude <- map_dbl(sf$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(sf$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\nFixed distance weight matrix using dnearneigh(coords, lower, upper, longlat=TRUE). The fixed distance weight matrix defines all areas with centroids within defined lower-upper distance threshold as areas. To get the upper threshold, we first do k1 <- knn2nb(knearneigh(coords)) to convert the knn neighbours into a nb class object, then take nbdists(k1, coords) to find the distances. We can take the max distance here as a reference for the upper threshold so as to confirm all unit will have a least one neighbour\nAdaptive distance weight matrix enforces a fixed number of neighbours e.g., using knn2nb(knearneigh(coords, k=6))\n\n\nAssign weights to the identified neighbour links (spatial weights)\n\nRow-standardised weight matrix based on queen’s method using nb2listw(nb_object, style=“W”, zero.policy=TRUE)\nWeight matrix based on inverse distance method using computation of inverse distance (dist <- nbdists(wm_q, coords, longlat = TRUE) then ids <- lapply(dist, function(x) 1/(x))). After that take rswm_ids <- nb2listw(wm_q, glist=ids, style=“B”, zero.policy=TRUE)\nRaw weight matrix using b_weights <- lapply(wm_q1, function(x) 0*x + 1) then b_weights2 <- nb2listw(wm_q1, glist = b_weights, style = “B”)\n\nApplication of Spatial Weight Matrix (using lag.listw())\n\nSpatial Lag with row-standarised weights taking row-standardised weight matrix based on queen’s method as spatial weight\nSpatial Lag as a sum of neighbouring values taking raw weight matrix as spatial weight\nSpatial window average (first include.self() then take repeat steps to compute row-standardised weight matrix based on queen’s method and take that as spatial weight)\nSpatial window sum (first include.self() then take repeat steps to compute raw weight matrix and take that as spatial weight)\n\n\nCheck Global Spatial Autocorrelation, i.e. whether spatial distribution is random or are neighbours similar to each other\n\nMoran’s I - using the decided spatial weights computed in the previous section, do a moran test (moran.test(sf$variable, listw=spatial_weight,))\nMonte Carlo Moran’s I - moran.mc()\nGeary’s C using the decided spatial weights computed in the previous section, do a geary test (geary.test(sf$variable, listw=spatial_weight,))\nMonte Carlo Geary’s C - geary.mc()\n\nDo a Spatial Correlogram to examine patterns of global spatial autocorrelation as we increase the distance (lag) using sp.correlogram()\nDo Cluster and Outlier Analysis using Local Indicators of Spatial Association\n\nCompute local moran using localmoran()\nTo view the general pattern: we can map the local moran’s I values and p-values on the map\nFor a quick view of the relationship between the values of the choen attribute at each location and the average value of the same attribute at neighbouring locations, we can do a quick Moran scatterplot using moran.plot()\nFor a more detailed analysis and mapping, we can assign the locations to four quardrants and plot a LISA Cluster Map. The LISA Cluster Map shows the significant locations colour-coded by their belonging in the quardrant.\n\nPreparing LISA map classes then plotting LISA map\nPlotting LISA Map\n\n\nHot Spot and Cold Spot Area Analysis (besides detecting clusters and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas. It tells us where features with either high (i.e., hot spots) or low values (cold spots) cluster spatially).\n\nGetis and Ord’s G Statistics\nNote difference:\nMoran’s I is a measure of the degree to which the value at a target site is similar to values at adjacent sites. Moran’s I is large and positive when the value for a given target (or for all locations in the global case) is similar to adjacent values and negative when the value at a target is dissimilar to adjacent values.\nGetis-Ord G* identifies areas where high or low values cluster in space. G* is high where the sum of values within a neighborhood of a given radius or configuration is high relative to the global average and negative where the sum of values within a neighborhood are small relative to the global average and approaches 0 at intermediate values.\nFor G statistics, we need to use distance-based matrix (either fixed distance or adaptive distance). Then we compute the G1 statistics using localG()"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "This exercise covers the following:\n\nGeographical Segmentation with Spatially Constrained Clustering Techniques"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#getting-started",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "Getting Started",
    "text": "Getting Started\nInstall and load the necessary packages\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#data-import-and-preparation",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#data-import-and-preparation",
    "title": "Hands-on Exercise 3",
    "section": "Data Import and Preparation",
    "text": "Data Import and Preparation\n\nImporting Geospatial Data\nWe will first import Myanmar Township Boundary GIS data.\n\nshan_sf <- st_read(dsn = \"data/geospatial\",\n                   layer = \"myanmar_township_boundaries\") %>% \n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\Users\\fongb\\Desktop\\MITB\\ISSS624 - Applied Geospatial Analytics\\quarto\\fongbx\\ISSS624\\hands-on_exercises\\hands-on_ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nWe can examine the import township boundary object further.\n\nhead(shan_sf)\n\nSimple feature collection with 6 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.74308 xmax: 97.3376 ymax: 24.15907\nGeodetic CRS:  WGS 84\n  OBJECTID           ST ST_PCODE       DT   DT_PCODE       TS  TS_PCODE\n1      163 Shan (North)   MMR015  Mongmit MMR015D008  Mongmit MMR015017\n2      203 Shan (South)   MMR014 Taunggyi MMR014D001  Pindaya MMR014006\n3      240 Shan (South)   MMR014 Taunggyi MMR014D001  Ywangan MMR014007\n4      106 Shan (South)   MMR014 Taunggyi MMR014D001 Pinlaung MMR014009\n5       72 Shan (North)   MMR015  Mongmit MMR015D008   Mabein MMR015018\n6       40 Shan (South)   MMR014 Taunggyi MMR014D001    Kalaw MMR014005\n                ST_2           LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1 Shan State (North)   Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2 Shan State (South)   Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3 Shan State (South)   Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4 Shan State (South) Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5 Shan State (North)    Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6 Shan State (South)    Kalaw\\n163138       <NA> State       uavm      ကလော\n      AREA                       geometry\n1 2703.611 MULTIPOLYGON (((96.96001 23...\n2  629.025 MULTIPOLYGON (((96.7731 21....\n3 2984.377 MULTIPOLYGON (((96.78483 21...\n4 3396.963 MULTIPOLYGON (((96.49518 20...\n5 5034.413 MULTIPOLYGON (((96.66306 24...\n6 1456.624 MULTIPOLYGON (((96.49518 20...\n\n\nWe can also use glimpse() to view the data types of its fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\nImporting Aspatial Data\nWe will now import the 2014 Myanmar Population and Housing Census Myanmar data.\n\nict <- read_csv(\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(ict)\n\n# A tibble: 6 × 11\n  Distri…¹ Distr…² Towns…³ Towns…⁴ Total…⁵ Radio Telev…⁶ Land …⁷ Mobil…⁸ Compu…⁹\n  <chr>    <chr>   <chr>   <chr>     <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 MMR014D… Taungg… MMR014… Taungg…   82604 30176   62388    6736   48461    6705\n2 MMR014D… Taungg… MMR014… Nyaung…   42634 13801   23640     810   14973     669\n3 MMR014D… Taungg… MMR014… Hopong    24728  5083   11272     799    5192     358\n4 MMR014D… Taungg… MMR014… Hsihse…   32771  8087   16568    1042    4755     325\n5 MMR014D… Taungg… MMR014… Kalaw     41341 11607   25285    1739   16900    1225\n6 MMR014D… Taungg… MMR014… Pindaya   17544  7324    8862     348    2849     226\n# … with 1 more variable: `Internet at home` <dbl>, and abbreviated variable\n#   names ¹​`District Pcode`, ²​`District Name`, ³​`Township Pcode`,\n#   ⁴​`Township Name`, ⁵​`Total households`, ⁶​Television, ⁷​`Land line phone`,\n#   ⁸​`Mobile phone`, ⁹​Computer\n\n\nThe unit of measurement of the values are number of household. Using these values directly will be biased by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable (defined by how many of each ICT variable per 1000 households) by using the code chunk below.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \nhead(ict_derived)\n\n# A tibble: 6 × 17\n  DT_PC…¹ DT    TS_PC…² TS    TT_HO…³ RADIO    TV LLPHONE MPHONE COMPU…⁴ INTER…⁵\n  <chr>   <chr> <chr>   <chr>   <dbl> <dbl> <dbl>   <dbl>  <dbl>   <dbl>   <dbl>\n1 MMR014… Taun… MMR014… Taun…   82604 30176 62388    6736  48461    6705    9746\n2 MMR014… Taun… MMR014… Nyau…   42634 13801 23640     810  14973     669    1604\n3 MMR014… Taun… MMR014… Hopo…   24728  5083 11272     799   5192     358     631\n4 MMR014… Taun… MMR014… Hsih…   32771  8087 16568    1042   4755     325     580\n5 MMR014… Taun… MMR014… Kalaw   41341 11607 25285    1739  16900    1225    1741\n6 MMR014… Taun… MMR014… Pind…   17544  7324  8862     348   2849     226     136\n# … with 6 more variables: RADIO_PR <dbl>, TV_PR <dbl>, LLPHONE_PR <dbl>,\n#   MPHONE_PR <dbl>, COMPUTER_PR <dbl>, INTERNET_PR <dbl>, and abbreviated\n#   variable names ¹​DT_PCODE, ²​TS_PCODE, ³​TT_HOUSEHOLDS, ⁴​COMPUTER, ⁵​INTERNET"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#exploratory-data-analysis",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#exploratory-data-analysis",
    "title": "Hands-on Exercise 3",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nEDA using Statistical Graphics\nWe can use statistical graphics like histograms to understand the overall distribution of the data values.\n\nradio <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv <- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone <- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone <- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer <- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet <- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nggarrange(radio, tv, llphone, mphone, computer, internet,\n          ncol = 3, nrow = 2)\n\n\n\n\n\n\nEDA using Choropleth Map\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e., shan_sf) and aspatial data.frame object (i.e., ict_derived) into one.\n\nshan_sf <- left_join(shan_sf, ict_derived,\n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nWe want to know whether the distribution of radio penetration rate is even across the township, or how the distribution is related to the underlying total number of households at the townships. For this purpose, we will create two choropleth maps, one for total number of households and one for radio penetration rate for side-by-side comparison.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#correlation-analysis",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#correlation-analysis",
    "title": "Hands-on Exercise 3",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated. We will use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\nThe correlation plot shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n               lower = \"ellipse\",\n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#hierarchy-cluster-analysis",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#hierarchy-cluster-analysis",
    "title": "Hands-on Exercise 3",
    "section": "Hierarchy Cluster Analysis",
    "text": "Hierarchy Cluster Analysis\n\nExtracting Clustering Variables\nFirst, we will extract the clustering variables from shan_sf simple features object into data.frame. This is required because the function that does clustering will take all inputs as clustering variables. Note that we exclude INTERNET_PR because it is highly correlated with COMPUTER_PR. The code line st_set_geometry(NULL) is required because shan_sf has a geometry column (is a geometric dataset) so we need to set to NULL for it to become a non-geometric dataset.\n\ncluster_vars <- shan_sf %>% \n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\n\nhead(cluster_vars)\n\n      TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1  Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2  Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3  Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4 Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5   Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6    Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n\n\nWe will change the rows to township name instead of row number and remove the the TS.x field after usage.\n\nrow.names(cluster_vars) <- cluster_vars$TS.x\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict)\n\n         RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit  286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya  417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan  484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein   449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw    280.7624 611.6204   42.06478  408.7951    29.63160\n\n\n\n\nData Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual that their values range are different. In order to avoid the cluster analysis results being biased to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\nMin-Max Standardisation\nIn the code chunk below, normalize() of heatmaply package is used to standardise the clustering variables using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\nNotice that the values range of the Min-max standardised clustering variables are 0-1.\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\n\n\nZ-Score Standardisation\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to standardise the clustering variables using Z-score method.\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\n(Note: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.)\n(Warning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.)\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\n\n\n\nVisualising the Standardised Clustering Variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical. The code chunk below plots the scaled Radio_PR field.\nNotice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisible NOT to perform data standardisation if the values range of the clustering variables are not very large.\n\nr <- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\nComputing Proximity Matrix\nNext, we will use dist() function to compute the proximity matrix. dist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat <- dist(shan_ict, method=\"euclidean\")\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\nComputing Hierarchical Clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process. The argument cex=0.6 will scale the plot down to 60%, so that it does not appear too cluttered.\n\nhclust_ward <- hclust(proxmat, method = \"ward.D\")\nplot(hclust_ward, cex=0.6)\n\n\n\n\n\n\nSelecting the Optimal Clustering Algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms (i.e., the different methods of hierachical clustering like “average”, “single”, “complete” and “ward”).\nTo assess efficiency, we check the homogeneity within the individual clusters. We can draw on the variable ac from the output of the agnes function to see the agglomerative coefficient. From the results, we can see that ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in subsequent analysis, only ward’s method will be used.\n\nm <- c(\"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c(\"average\", \"single\", \"complete\", \"ward\")\n\n# Create a function to \nac <- function(x){\n  agnes(shan_ict, method=x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\n\n\nDetermining Optimal Clusters\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\nGap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used. hcut function from factoextra package is also used.\n\nset.seed(1234)\ngap_stat <- clusGap(shan_ict,\n                    FUN = hcut,\n                    nstart = 25,\n                    K.max = 10,\n                    B = 50)\n\n# Print the result\nprint(gap_stat, method=\"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.677830 0.2707006 0.03692273\n [2,] 8.130029 8.346462 0.2164322 0.04088387\n [3,] 7.992265 8.200253 0.2079877 0.03762167\n [4,] 7.862224 8.079170 0.2169462 0.04018998\n [5,] 7.756461 7.977981 0.2215201 0.04229538\n [6,] 7.665594 7.890134 0.2245409 0.04501316\n [7,] 7.590919 7.812990 0.2220709 0.04364077\n [8,] 7.526680 7.739537 0.2128575 0.04477188\n [9,] 7.458024 7.670476 0.2124519 0.04623855\n[10,] 7.377412 7.603947 0.2265346 0.04762720\n\n\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. The next option is two clusters but that is also not ideal because there when we do clustering analysis, there are preferably three clusters and above. By examining the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\nInterpreting the Dendograms\nIn the dendrogram displayed in the previous section, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex=0.6)\nrect.hclust(hclust_ward,\n            k=6,\n            border=2.5)\n\n\n\n\n\n\nVisually-Driven Hierarchical Clustering Analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package. With heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\nTransforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make a heatmap. The code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat <- data.matrix(shan_ict)\nshan_ict_mat\n\n            RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit    286.18517 554.1313  35.306182 260.69440   12.159391\nPindaya    417.46466 505.1300  19.835841 162.39170   12.881897\nYwangan    484.52147 260.5734  11.935906 120.28559    4.414650\nPinlaung   231.64994 541.7189  28.544542 249.49028   13.762547\nMabein     449.49027 708.6423  72.752549 392.60890   16.450417\nKalaw      280.76244 611.6204  42.064778 408.79514   29.631601\nPekon      318.61183 535.8494  39.832703 214.84764   18.970325\nLawksawk   387.10175 630.0035  31.513657 320.56863   21.766768\nNawnghkio  349.33590 547.9456  38.449603 323.02011   15.764647\nKyaukme    210.95485 601.1773  39.582672 372.49304   30.947094\nMuse       175.88008 842.5317 139.551634 712.92878   91.293779\nLaihka     153.35609 590.5575  65.529010 261.43345   27.758817\nMongnai    182.51928 515.9062   5.141388 267.51285   28.277635\nMawkmai     97.44231 234.5010   2.780095  36.41924    7.784265\nKutkai     238.71578 474.0161  62.897378 264.62088   21.070884\nMongton    193.51808 388.4453  25.129169 290.51198   21.841240\nMongyai    168.44238 364.2707  20.333133 135.12905    9.378752\nMongkaing  156.74749 116.0299   6.000490  50.75925    8.388440\nLashio     235.73893 680.7891  66.685148 463.83909   60.216842\nMongpan    228.74008 517.2477  21.582734 437.74211   46.485888\nMatman     244.12297 219.4093   8.438819  45.20796    6.027728\nTachileik  363.35354 759.4214  59.751756 735.43090   92.401937\nNarphan     75.27012 210.0886  42.187690 305.26891    3.277892\nMongkhet    79.37695 313.3956  29.034268 114.64174    6.853583\nHsipaw     198.12167 475.8613  32.316784 269.08669   14.588719\nMonghsat   107.67490 460.1169  34.508769 189.51537   22.817273\nMongmao    120.05744 512.6855  85.495452 424.98803   11.297271\nNansang    203.99724 585.6969  37.586810 314.63712   30.641998\nLaukkaing   53.26400 778.5117 134.354578 716.74513   35.556180\nPangsang    97.44765 490.3358  62.569694 440.83757   50.427456\nNamtu      240.01374 630.6159  35.220342 105.05970   19.929559\nMonghpyak  405.02839 503.3252  42.497972 381.83293   25.141930\nKonkyan     21.05456 287.0743 169.351886 316.73380   10.801904\nMongping   161.90476 330.8817  24.611033 190.75908   11.598303\nHopong     205.55645 455.8395  32.311550 209.96441   14.477515\nNyaungshwe 323.70878 554.4870  18.998921 351.19857   15.691701\nHsihseng   246.77306 505.5689  31.796405 145.09780    9.917305\nMongla      82.18126 673.1951  86.981567 555.10753   62.596006\nHseni      257.32235 628.8310  44.825537 431.87028   19.696069\nKunlong    121.92071 589.7806 181.485758 237.58661   20.785219\nHopang     127.60443 556.8737  81.746586 487.68817   24.523976\nNamhkan    134.98623 653.5462  91.796237 596.48877   30.162955\nKengtung   267.50939 637.7874  63.203895 487.32989   47.542234\nLangkho    227.46781 587.1483  74.391989 403.91035   32.308059\nMonghsu    235.95261 464.9495  11.629171 231.06184   12.389958\nTaunggyi   365.30919 755.2661  81.545688 586.66651   81.170403\nPangwaun    76.24025 366.7406  28.992770 518.14733    6.013315\nKyethi     268.62150 447.1408  22.357039  89.65285   12.807550\nLoilen     142.92267 552.6099  21.649390 253.00431   32.015411\nManton     194.32513 188.3379   8.069764  54.79630    3.644410\nMongyang    71.74622 569.3250 113.944066 469.01868   12.847119\nKunhing    161.48796 473.0853  73.085339 340.48140   26.039387\nMongyawng  278.08501 739.2953 121.978196 324.06383   15.326276\nTangyan    223.86318 453.2753  22.594047 105.23021   12.065335\nNamhsan    230.83668 390.5005  23.090976  97.77128    8.987943\n\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\nMapping the clusters found\nWith close examination of the dendragram above, we have decided to retain six clusters. cutree() can be used to cut a tree, e.g., as resulting from hclust, into several groups either by specifying the desired number(s) of groups or the cut height(s).\n\ngroups <- as.factor(cutree(hclust_ward, k=6))\ngroups\n\n   Mongmit    Pindaya    Ywangan   Pinlaung     Mabein      Kalaw      Pekon \n         1          1          2          1          3          3          1 \n  Lawksawk  Nawnghkio    Kyaukme       Muse     Laihka    Mongnai    Mawkmai \n         3          3          3          4          1          1          5 \n    Kutkai    Mongton    Mongyai  Mongkaing     Lashio    Mongpan     Matman \n         1          1          5          2          3          3          2 \n Tachileik    Narphan   Mongkhet     Hsipaw   Monghsat    Mongmao    Nansang \n         4          5          5          1          5          6          1 \n Laukkaing   Pangsang      Namtu  Monghpyak    Konkyan   Mongping     Hopong \n         4          6          1          3          5          5          1 \nNyaungshwe   Hsihseng     Mongla      Hseni    Kunlong     Hopang    Namhkan \n         3          1          4          3          1          6          4 \n  Kengtung    Langkho    Monghsu   Taunggyi   Pangwaun     Kyethi     Loilen \n         3          3          1          4          6          1          1 \n    Manton   Mongyang    Kunhing  Mongyawng    Tangyan    Namhsan \n         2          6          1          3          1          1 \nLevels: 1 2 3 4 5 6\n\n\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>% \n  rename(CLUSTER = `as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed. The choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.\n\nqtm(shan_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#spatially-constrained-clustering---skater-approach",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#spatially-constrained-clustering---skater-approach",
    "title": "Hands-on Exercise 3",
    "section": "Spatially Constrained Clustering - SKATER Approach",
    "text": "Spatially Constrained Clustering - SKATER Approach\nIn this section, we will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\nConverting into SpatialPolygonsDataFrame\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only supports sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp <- as_Spatial(shan_sf)\nshan_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 55 \nextent      : 96.15107, 101.1699, 19.29932, 24.15907  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 30\nnames       : OBJECTID,           ST, ST_PCODE,     DT.x, DT_PCODE.x,    TS.x,  TS_PCODE,               ST_2,         LABEL2, SELF_ADMIN, ST_RG, T_NAME_WIN,  T_NAME_M3,          AREA, DT_PCODE.y, ... \nmin values  :        0,  Shan (East),   MMR014,   Hopang, MMR014D001,  Hopang, MMR014001,  Shan State (East),  Hopang\n24637,       Danu, State,      &GmiH,      ကျိုင်းတုံ, 629.024962737, MMR014D001, ... \nmax values  :      268, Shan (South),   MMR016, Taunggyi, MMR016D003, Ywangan, MMR016011, Shan State (South), Ywangan\n76933,         Wa, State,     z,fcHk,        ဟိုပုံး, 6027.67295439, MMR016D004, ... \n\n\n\n\nComputing Neighbour List\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n(Note that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.)\n\nplot(shan_sp, border=grey(.5))\nplot(shan.nb, coordinates(shan_sp), col=\"blue\", add=TRUE)\n\n\n\n\n\n\nComputing Minimum Spanning Tree\n\nCalculating edge costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between its nodes. This function computes this distance using a data.frame with observations vector in each node.\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\n\nlcost <- nbcosts(shan.nb, shan_ict)\nhead(lcost)\n\n[[1]]\n[1] 263.3710 144.0247 430.6407 237.7849\n\n[[2]]\n[1] 257.3161 302.5179 204.3295\n\n[[3]]\n[1] 257.3161 432.1653\n\n[[4]]\n[1] 181.96406  94.61225 138.12050\n\n[[5]]\n[1] 263.3710 674.0112\n\n[[6]]\n[1] 302.51785 181.96406 140.01101  95.66782 252.26066\n\n\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below. Note that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w <- nb2listw(shan.nb, lcost, style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst <- mstree(shan.w)\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nWe can also check the class and dimension of shan.mst below.\n\nprint(class(shan.mst))\n\n[1] \"mst\"    \"matrix\"\n\nprint(dim(shan.mst))\n\n[1] 54  3\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(shan_sp, border=gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\nComputing Spatially Constrained Clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\n\nclus6 <- spdep::skater(edges=shan.mst[,1:2],\n                       data=shan_ict,\n                       method=\"euclidean\",\n                       ncuts=5)\n\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clus6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the code chunk below.\n\nccs6 <- clus6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(shan_sp, border=gray(.5))\nplot(clus6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\nVisualising the Clusters in Choropleth Map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat <- as.matrix(clus6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#spatially-constrained-clustering---clusgeo-method",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#spatially-constrained-clustering---clusgeo-method",
    "title": "Hands-on Exercise 3",
    "section": "Spatially Constrained Clustering - ClusGeo Method",
    "text": "Spatially Constrained Clustering - ClusGeo Method\nIn this section, we will use ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\nWard-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() that we learned in previous section. To perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to the section on Computing Proximity Matrix.\n\nnongeo_cluster <- hclust(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster,\n            k = 6,\n            border = 2:5)\n\n\n\n\n\n\nMapping the clusters formed\nWe can plot the clusters on a categorical area shaded map by using the steps below.\n\ngroups <- as.factor(cutree(nongeo_cluster, k = 6))\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\nSpatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package. as.dist() is used to convert the data frame into matrix.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0,1,0.1),\n                  K = 6, graph = TRUE)\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster objecct.\n\ngroups <- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#visual-interpretation-of-clusters",
    "href": "hands-on_exercises/hands-on_ex3/hands-on_ex3.html#visual-interpretation-of-clusters",
    "title": "Hands-on Exercise 3",
    "section": "Visual Interpretation of Clusters",
    "text": "Visual Interpretation of Clusters\n\nVisualising individual clustering variable\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster. The boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\nMutivariate Visualisation\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package.\nThe parallel coordinate plot reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %>% \n  st_set_geometry(NULL) %>%\n  group_by(CLUSTER) %>%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR mean_COMPUTE…¹\n  <chr>           <dbl>      <dbl>           <dbl>          <dbl>          <dbl>\n1 1               237.        508.            39.2           234.          18.8 \n2 2               485.        261.            11.9           120.           4.41\n3 3               282.        634.            57.9           404.          32.0 \n4 4               196.        744.            99.0           651.          65.5 \n5 5               133.        252.            34.5           139.           7.53\n6 6                98.6       499.            74.5           468.          21.0 \n# … with abbreviated variable name ¹​mean_COMPUTER_PR"
  }
]