---
title: "In-class Exercise 1"
editor: visual
---

## Overview

This exercise covers the following:

1.  [Spatial Weights and Applications](https://r4gdsa.netlify.app/chap03.html)

## Getting Started

Install and load the required packages. **spdep** package is a collection of functions for creating spatial weights matrix objects.

```{r}
# remotes::install_version('spData', version = '2.2.1')
# install.packages('spdep')
pacman::p_load(sf, spdep, tidyverse, tmap)
```

## Importing Data

### Importing Geospatial Data

This code chunk will import Hunan shapefile into R. The imported shapefile will be **simple features** object of **sf**.

```{r}
hunan <- st_read(dsn = 'data/geospatial',
                layer = 'Hunan')
```

Examine the hunan sf dataframe.

```{r}
head(hunan, n=3)
```

### Importing CSV Data

Next, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')
```

Examine the hunan2012 dataframe.

```{r}
head(hunan2012)
```

### Performing Relational Join

The code chunk below will be used to update the attribute table of hunan sf dataframe with the attribute fields of hunan2012 dataframe. This is performed using the left_join() of dplyr package.

```{r}
hunan <- left_join(hunan, hunan2012)
head(hunan)
```

## Visualising Regional Development Indicator

Now, we will prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text('NAME_3', size=0.4)

gdppc <- qtm(hunan, fill='GDPPC')
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights

In this section, we will learn how to use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. This function has a "queen" argument that takes TRUE or FALSE as options. If we do not specify this argument the default is set to TRUE, that is, if we don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

### Computing QUEEN contiguity based neighbours

The code chunk below is used to compute Queen contiguity weight matrix. The summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbour.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

For each polygon in our polygon object, wm_q lists all neighbouring polygons. For example, to see the neighbours for the first polygon, we use the below code. It shows that Polygon 1 has 5 neighbours. The numbers represent the polygon IDs as stored in Hunan sf dataframe.

```{r}
wm_q[[1]]
```

We can retreive the county name of Polygon ID=1 using the code chunk below.

```{r}
hunan$County[1]
```

To reveal the county names of the five neighbouring polygons, we use the code chunk below.

```{r}
hunan$County[c(2,3,4,57,85)]
```

We can retreive the GDPPC of these five countries by using the code chunk below. The printed output shows that the GDPPC of the five nearest neighbours of Anxiang based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can display the complete weight matrix by using *str()*.

```{r}
str(wm_q)
```

### Computing ROOK contiguity based neighbours

The code chunk below is used to compute ROOK contiguity weight matrix. The summary report shows that there are 88 area units in Hunan. The most connected area unit has 10 neighbours. There are two area units with only one neighbour.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### Visualising Contiguity Weights

A connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs.

**Getting Latitude and Longitude of Polygon Centroids**

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object. We need the coordinates in a separate dataframe for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of hunan. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the st_centroid function over the geometry column of hunan and access the longitude value of the centroid through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude of the centroid with one key difference, We access the second value of each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have longitude and latitude, we use cbind to put them into the same object.

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

**Plotting Queen Contiguity Based Neighbours Map**

The arguments *pch* refers to the plotting symbol, *cex* for the symbol size and *add=TRUE* means to add to current plot.

```{r}
plot(hunan$geometry, border='lightgrey')
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col='red')
```

**Plotting Rook Contiguity Based Neighbours Map**

```{r}
plot(hunan$geometry, border='lightgrey')
plot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col='red')
```

**Plotting both Queen and Rook Contiguity Based Neighbours Maps**

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border='lightgrey')
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col='red', main='Queen Contiguity')
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col='red', main='Rook Contiguity')
```

## Computing Distance Based Neighbours

In this section, you will learn how to derive distance-based weight matrices by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package. The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### Determining the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat=TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using *dnearneigh()* as shown in the code chunk below. We input `coords` as the matrix of point coordinates, 0 as the lower distance boud and 62 as the upper distance bound.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat=TRUE)
summary(wm_d62)
```

Next, we will use *str()* to display the content of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine *table()* and *card()* of spdep. It displays the number of links each County has.

```{r}
table(hunan$County, card(wm_d62))
```

### Plotting fixed distance weight matrix

Next, we will plot the distance weight matrix by using the code chunk below. The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

```{r}
plot(hunan$geometry, border='lightgrey')
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col='red', length=0.08)
```

Alternatively, we can plot both of them next to each other by using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border='lightgrey')
plot(k1, coords, add=TRUE, col='red', length=0.08, main='1st nearest neighbours')
plot(hunan$geometry, border='lightgrey')
plot(wm_d62, coords, add=TRUE, pch=19, cex=0.6, main='Distance link')
```

### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below. (*Note: Where in the previous example, we set a lower and upper bound distance, in this example, we impose 6 neighbours for every County).*

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Similarly, we can display the content of the matrix by using *str()*.

```{r}
str(knn6)
```

### Plotting distance based neighbours

We can plot the weight matrix using the code chunk below.

```{r}
plot(hunan$geometry, border='lightgrey')
plot(knn6, coords, pch=19, cex=0.6, add=TRUE, col='red')
```

## Weight based on Inversed Distance method (IDW)

First, we will compute the distances between areas using *nbdists()* of **spdep**. *(Note: Recall that wm_q is our weight matrix computed based on Queen continuity method)*

```{r}
dist <- nbdists(wm_q, coords, longlat=TRUE)
idw <- lapply(dist, function(x) 1/(x))
idw
```

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

```{r}
rswm_q <- nb2listw(wm_q, style='W', zero.policy=TRUE)
rswm_q
```

To see the weight of the first polygon, we use the following code chunk. Each neighbour is assigned a 0.2 of the total weight. This means that when R computes the average neighbouring income values, each neighbour's income will be multiplied by 0.2 before being tallied.

```{r}
rswm_q$weights[1]
```

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below. This time we add an additional argument glist referring to the list of general weights corresponding to neighbours and set it to idw, and we use style='B', which stands for basic binary coding.

```{r}
rswm_idw <- nb2listw(wm_q, glist=idw, style='B', zero.policy=TRUE)
rswm_idw
```

To see the weight of the first polygon, we use the following code chunk.

```{r}
rswm_idw$weights[1]
```

```{r}
summary(unlist(rswm_idw$weights))
```

## Application of Spatial Weight Matrix

There are four different spatial lagged variables, as follows:

-   spatial lag with row-standardized weights (taking weighted average of neighbours),

-   spatial lag as a sum of neighbouring values (taking sum of neighbours),

-   spatial window average (taking weighted average of neighbours and include itself),

-   and spatial window sum (taking sum of neighbours and include itself).

### Spatial Lag with row-standardised weights

Using the row-standardised weights matrix obtained in the previous section, we can compute the average neighbour GDPPC value for each polygon. These values are often referred to as spatially lagged values.

```{r}
gdppc.lag <- lag.listw(rswm_q, hunan$GDPPC)
gdppc.lag
```

Recall that in previous sections, we retrieved the GDPPC using the code chunk below. The spatially-lagged GDPPC value of the first polygon (24847.20) is computed using the row-standardised weights of each neighbour (0.2) multiplied by the GDPPC values of each of its neighbours.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can append the spatially lag GDPPC values onto the Hunan sf dataframe using the code chunk below.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c('NAME_3', 'lag GDPPC')
hunan <- left_join(hunan, lag.res)
```

The following table shows the average neighboring income values (stored under lag GDPPC) for each county.

```{r}
head(hunan)
```

Next, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, 'GDPPC')
lag_gdppc <- qtm(hunan, 'lag GDPPC')
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial Lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbours list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q,
                       glist=b_weights,
                       style='B')
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variables from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res_sum <- as.data.frame(lag_sum)
colnames(lag.res_sum) <- c('NAME_3', 'lag_sum GDPPC')
lag.res_sum
```

Recall that in previous sections, we retrieved the GDPPC using the code chunk below. The spatially-lagged GDPPC value as a sum of neighbouring values of the first polygon (124236) is computed using the sum of the GDPPC values of each of its neighbours.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Next, we will append the `lag_sum GDPPC` field into Hunan sf data frame by using the code chunk below.

```{r}
hunan <- left_join(hunan, lag.res_sum)
```

Now, we can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, 'GDPPC')
lag_sum_gdppc <- qtm(hunan, 'lag_sum GDPPC')
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element (includes the county itself). To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights. To begin we assign wm_q to a new variable because we will directly alter its structure to add the diagonal elements.

```{r}
wm_q1 <- wm_q
```

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_q1 <- include.self(wm_q1)
```

Now we obtain weights with *nb2listw()*. Default style is 'W', which is the row standardised weights.

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

We can see that the county itself is now included and the weights are distributed among the neighbours and itself.

```{r}
wm_q1$weights
```

Lastly, we need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, hunan$GDPPC)
lag_w_avg_gpdpc
```

We will convert the lag variable listw object into a dataframe by using *as.data.frame()*.

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag.res_wm_q1 <- as.data.frame(lag.list.wm_q1)
colnames(lag.res_wm_q1) <- c('NAME_3', 'lag_window_avg GDPPC')
hunan <- left_join(hunan, lag.res_wm_q1)
```

We can examine the dataframe using the code chunk below.

```{r}
head(hunan)
```

Lastly, we plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.

```{r}
gdppc <- qtm(hunan, 'GDPPC')
w_avg_gdppc <- qtm(hunan, 'lag_window_avg GDPPC')
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial Window Sum

The spatial window sum is the counterpart of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
wm_q1 <- wm_q
```

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_q1 <- include.self(wm_q1)
wm_q1
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_q1,
                       glist=b_weights,
                       style='B')
b_weights2
```

With out new weight structure, we can compute the lag variable with *lag.listw()*.

```{r}
lag.list_w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res_w_sum_gdppc <- as.data.frame(lag.list_w_sum_gdppc)
colnames(lag.res_w_sum_gdppc) <- c('NAME_3', 'w_sum GDPPC')
hunan <- left_join(hunan, lag.res_w_sum_gdppc)
head(hunan)
```

Lastly, *qtm()* of **tmap** package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.

```{r}
gdppc <- qtm(hunan, 'GDPPC')
w_sum_gdppc <- qtm(hunan, 'w_sum GDPPC')
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
