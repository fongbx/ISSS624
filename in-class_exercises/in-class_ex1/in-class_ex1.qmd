---
title: "In-class Exercise 1"
editor: visual
---

## Overview

This exercise covers the following:

1.  [Spatial Weights and Applications](https://r4gdsa.netlify.app/chap03.html)

## Getting Started

Install and load the required packages. **spdep** package is a collection of functions for creating spatial weights matrix objects.

```{r}
# remotes::install_version('spData', version = '2.2.1')
# install.packages('spdep')
pacman::p_load(sf, spdep, tidyverse, tmap)
```

## Importing Data

### Importing Geospatial Data

This code chunk will import Hunan shapefile into R. The imported shapefile will be **simple features** object of **sf**.

```{r}
hunan <- st_read(dsn = 'data/geospatial',
                layer = 'Hunan')
```

Examine the hunan sf dataframe.

```{r}
head(hunan, n=3)
```

### Importing CSV Data

Next, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')
```

Examine the hunan2012 dataframe.

```{r}
head(hunan2012)
```

### Performing Relational Join

The code chunk below will be used to update the attribute table of hunan sf dataframe with the attribute fields of hunan2012 dataframe. This is performed using the left_join() of dplyr package.

```{r}
hunan <- left_join(hunan, hunan2012)
head(hunan)
```

## Visualising Regional Development Indicator

Now, we will prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text('NAME_3', size=0.4)

gdppc <- qtm(hunan, fill='GDPPC')
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights

In this section, we will learn how to use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. This function has a \"queen\" argument that takes TRUE or FALSE as options. If we do not specify this argument the default is set to TRUE, that is, if we don\'t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

### Computing QUEEN contiguity based neighbours

The code chunk below is used to compute Queen contiguity weight matrix. The summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbour.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

For each polygon in our polygon object, wm_q lists all neighbouring polygons. For example, to see the neighbours for the first polygon, we use the below code. It shows that Polygon 1 has 5 neighbours. The numbers represent the polygon IDs as stored in Hunan sf dataframe.

```{r}
wm_q[[1]]
```

We can retreive the county name of Polygon ID=1 using the code chunk below.

```{r}
hunan$County[1]
```

To reveal the county names of the five neighbouring polygons, we use the code chunk below.

```{r}
hunan$County[c(2,3,4,57,85)]
```

We can retreive the GDPPC of these five countries by using the code chunk below. The printed output shows that the GDPPC of the five nearest neighbours of Anxiang based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can display the complete weight matrix by using *str()*.

```{r}
str(wm_q)
```

### Computing ROOK contiguity based neighbours

The code chunk below is used to compute ROOK contiguity weight matrix. The summary report shows that there are 88 area units in Hunan. The most connected area unit has 10 neighbours. There are two area units with only one neighbour.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### Visualising Contiguity Weights

A connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs.

**Getting Latitude and Longitude of Polygon Centroids**

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object. We need the coordinates in a separate dataframe for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of hunan. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the st_centroid function over the geometry column of hunan and access the longitude value of the centroid through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude of the centroid with one key difference, We access the second value of each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have longitude and latitude, we use cbind to put them into the same object.

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

**Plotting Queen Contiguity Based Neighbours Map**

The arguments *pch* refers to the plotting symbol, *cex* for the symbol size and *add=TRUE* means to add to current plot.

```{r}
plot(hunan$geometry, border='lightgrey')
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col='red')
```

**Plotting Rook Contiguity Based Neighbours Map**

```{r}
plot(hunan$geometry, border='lightgrey')
plot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col='red')
```

**Plotting both Queen and Rook Contiguity Based Neighbours Maps**

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border='lightgrey')
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col='red', main='Queen Contiguity')
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col='red', main='Rook Contiguity')
```
