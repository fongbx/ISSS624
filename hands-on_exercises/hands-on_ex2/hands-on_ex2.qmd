---
title: "Hands-on Exercise 2"
editor: visual
---

## Overview

This exercise covers the following:

1.  [Global and Local Measures of Spatial Autocorrelation](https://r4gdsa.netlify.app/chap04.html)

## Getting Started

Install and load the necessary packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Getting the Data into R Environment

### Importing shapefile

The following code chunk imports the Hunan shapefile as a simple features object of sf.

```{r}
hunan <- st_read(dsn="data/geospatial",
                 layer="Hunan")
```

### Importing csv file

The following code chunk imports the Hunan_2012.csv file as an R dataframe.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

The code chunk below is used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, hunan2012)
```

### Visualising Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n=5,
          style="equal") +
  tm_borders(alpha=0.5) +
  tm_layout(main.title="Equal Interval Classification",
            main.title.size=1)

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n=5,
          style="quantile") +
  tm_borders(alpha=0.5) +
  tm_layout(main.title="Equal Quantile Classification",
            main.title.size=1)

tmap_arrange(equal, quantile, asp=1, ncol=2)
```

## Global Spatial Autocorrelation

In this section, we will learn how to compute global spatial autocorrelation statistic and to perform spatial complete spatial complete randomness test for global spatial autocorrelation.

### Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e.Â county) in the study area.

We will use the code chunk below to compute the Queen contiguity weight matrix. The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbour.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

### Row-standardised Weights Matrix

Next, we will assign weights to each neighbouring polygon using equal weights (style="W"). This assigns the fraction of 1/(#ofneighbors) to each neighbouring county.

```{r}
rswm_q <- nb2listw(wm_q,
                   style="W",
                   zero.policy=TRUE)
rswm_q
```

```{r}
str(rswm_q)
```

### Global Spatial Autocorrelation: Moran's I

In this section, we will learn how to perform Moran's I statistics testing using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

Moran I statistic is 0.3007, with p-value less than 0.05. This means that there is sufficient evidence to support that the GDP of a county has a correlation coefficient of 0.3007 with its average neigbouring GDP value (also known as the lagging value).

```{r}
moran.test(hunan$GDPPC,
           listw=rswm_q,
           zero.policy=TRUE,
           na.action=na.omit)
```

### Computing Monte Carlo Moran's I

The *moran.test* method above makes some restrictive assumptions about the data and thus cannot always be reliable. Another approach is a Monte Carlo test which makes no assumption about the dataset including the shape and layout of each polygon.

The code chunk below performs permutation test for Moran's I statistic by using [*moran.mc()*](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulations will be performed.

The results show that pseudo p-value is 0.001. This pseudo p-value is computed using $$\frac{N_extreme + 1}{N+1}$$

where $$N_extreme$$ is the number of simulated Moran's I values more extreme than our observed statistic and N is the total number of simulations. Here, given a pseudo p-value of 0.001, it means that just 0.1 simulation result out of the 1000 simulations (as (0.1+1)/(1000+1) = 0.001) was more extreme than our observed Moran's I statistic of 0.3007.

This means that our observed Moran's I statistic of 0.3007 is not a value we would expect to compute if the variable of interest (i.e., GDPPC) were randomly distributed across each county. We can also interpret it as there is a 0.1% (0.001) probability that we would be wrong in rejecting the null hypothesis. Hence, we reject the null hypothesis that the variable of interest is randomly distributed.

```{r}
set.seed(1234)
bperm_moran <- moran.mc(hunan$GDPPC,
                  listw=rswm_q,
                  nsim=999,
                  zero.policy=TRUE,
                  na.action=na.omit)
bperm_moran
```

### Visualising Monte Carlo Moran's I

It is always a good practice for us the examine the Monte Carlo simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram using [*hist()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [*abline()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics.

```{r}
mean(bperm_moran$res[1:999])
```

```{r}
var(bperm_moran$res[1:999])
```

```{r}
summary(bperm_moran$res[1:999])
```

```{r}
hist(bperm_moran$res,
     freq=TRUE,
     breaks=20,
     xlab="Simulated Moran's I")
abline(v=0, col="red") # comparing to correlation coefficient of 0
```

### Global Spatial Autocorrelation: Geary's C

In this section, you will learn how to perform Geary's C statistics testing by using appropriate functions of **spdep** package.

The code chunk below performs Geary's C test for spatial autocorrelation by using [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

Here, we obatin a Geary C statistic of 0.6907, which can be interpreted as a mild positive spatial autocorrelation *(Note: Computation of Geary's C results in a value within the range of 0 to +2 . When we obtain a zero value, it is interpreted as a strong positive spatial autocorrelation (perfect correlation), a value of 1 indicates a random spatial pattern (no autocorrelation), and a value between 1 and 2 represents a negative spatial autocorrelation (2 is a perfect dispersion)).* As p-value is less than 0.05, there is sufficient evidence that the spatial correlation exists.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

### Computing Monte Carlo Geary's C

The code chunk below performs permutation test for Geary's C statistic by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

Geary C statistic is 0.6907. Based on simulation, the pseudo p-value is 0.001, which is less than alpha 0.05. We thus have sufficient evidence evidence to reject the null hypothesis that the distribution is random.

```{r}
set.seed(1234)
bperm_geary <- geary.mc(hunan$GDPPC,
                  listw=rswm_q,
                  nsim=999)
bperm_geary
```

### Visualising Monte Carlo Geary's C

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm_geary$res[1:999])
```

```{r}
var(bperm_geary$res[1:999])
```

```{r}
summary(bperm_geary$res[1:999])
```

```{r}
hist(bperm_geary$res, freq=TRUE, breaks=20,
     xlab="Simulated Geary C")
abline(v=mean(bperm_geary$res), col="red") # comparing to Geary C=1, which signifies random distribution
```

## Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation in our data or model residuals. They show how correlated pairs of spatial observations are when we increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's C) against distance. Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### Compute Moran's I correlogram

In the code chunk below, [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used is Moran's I. The *plot()* of base Graph is then used to plot the output.

```{r}
moran_corr <- sp.correlogram(wm_q, hunan$GDPPC,
                             order=6,
                             method="I",
                             style="W")
plot(moran_corr)
```

Plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(moran_corr)
```

### Compute Geary's C correlogram

In the code chunk below, [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used is Geary's C. The *plot()* of base Graph is then used to plot the output.

```{r}
geary_corr <- sp.correlogram(wm_q,
                             hunan$GDPPC,
                             order=6,
                             method="C",
                             style="W")
plot(geary_corr)
```

Similar to previous step, we will print out the analysis report using the code chunk below.

```{r}
print(geary_corr)
```

## Cluster and Outlier Analysis

Local Indicators for Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city, local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.

In this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran's I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.

### Compute local Moran's I

To compute local Moran's I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

The code chunk below is used to compute local Moran's I of GDPPC at the county level.

```{r}
local_moran <- localmoran(hunan$GDPPC, rswm_q)
head(local_moran)
```

The code chunk below lists the contents of the local Moran matrix derived using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
fips <- order(hunan$County) # returns vector of indices of county names in ascending order
printCoefmat(data.frame(local_moran[fips,], row.names=hunan$County[fips], check.names=FALSE))
```

### Mapping local Moran's I

Before mapping the local Moran's I map, it is wise to append the local Moran's I dataframe (i.e.Â local_moran) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The output SpatialPolygonDataFrame is called *hunan.local_moran*.

```{r}
hunan.local_moran <- cbind(hunan, local_moran) %>% 
  rename(Pr.Ii = Pr.z....E.Ii..) # rename the p-value col as it will change to wierd str after combining
```

Using choropleth mapping functions of **tmap** package, we can plot the local Moran's I values by using the code chinks below.

```{r}
local_moran_map <- tm_shape(hunan.local_moran) +
  tm_fill(col="Ii",
          style="pretty",
          palette="RdBu",
          title="Local Moran Statistics") +
  tm_borders(alpha=0.5)
local_moran_map
```

### Mapping local Moran's I p-values

The choropleth map shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values. The code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package.

```{r}
local_moran_pvalue <- tm_shape(hunan.local_moran) +
  tm_fill(col="Pr.Ii",
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues",
          title="Local Moran's I p-values") +
  tm_borders(alpha=0.5)
local_moran_pvalue
```

### Mapping both local Moran's I values and p-values

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other. The code chunk below will be used to create such visualisation.

```{r}
tmap_arrange(local_moran_map, local_moran_pvalue,
             asp=1, ncol=2)
```

## Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations colour-coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### Plotting Moran scatterplot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**. Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County),
                  xlab="GDPPC 2012",
                  ylab="Spatially Lag GDPPC 2012")
```

### Plotting Moran scatterplot with standardised variable

First we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to center and scale the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
hunan$GDPPC <- scale(hunan$GDPPC) %>% as.vector
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe. Now, we are ready to plot the Moran scatterplot again by using the code chunk below.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County),
                  xlab="z-GDPPC 2012",
                  ylab="Spatially Lag z-GDPPC 2012")
```

### Preparing LISA map classes

The code chunks below show the steps to prepare a LISA cluster map.

First, we create a vector of zeros with the same length as local_moran.

```{r}
quadrant <- vector(mode="numeric", length=nrow(local_moran))
```

Next, we derive the spatially lagged variable of interest (i.e., GDPPC) and center it around the mean. If DV \> 0, the GDPCC of the county is higher compared to the mean of its neighbours.

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)
```

This is followed by centering the local Moran's around the mean.

```{r}
C_moran <- local_moran[,1] - mean(local_moran[,1])
```

Next, we will set a statistical significance level for the local Moran.

```{r}
signif <- 0.05
```

These four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories. DV defines whether the value of the variable of interest (i.e., GDPPC) is high or low, whereas c_moran defines whether it is similar to its neighbours.

```{r}
quadrant[DV <0 & C_moran>0] <- 1 
quadrant[DV >0 & C_moran<0] <- 2
quadrant[DV <0 & C_moran<0] <- 3  
quadrant[DV >0 & C_moran>0] <- 4  
```

Lastly, we further reassign non-significant Moran into category 0.

```{r}
quadrant[local_moran[,5]>signif] <- 0
```

### Plotting LISA map

Now, we can build the LISA map by using the code chunks below.

```{r}
hunan.local_moran$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.local_moran) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
LISAmap
```

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other. The code chunk below will be used to create such visualisation.

```{r}
gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

## Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas. The term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.

### Getis and Ord's G-Statistics

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

### Deriving distance-based weight matrix

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

#### Deriving the centroid

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

#### Determining the cut-off distance

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat=TRUE))
summary(k1dists)
```

#### Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat=TRUE)
wm_d62
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object. The output spatial weights object is called `wm62_lw`.

```{r}
wm62_lw <- nb2listw(wm_d62, style="B")
summary(wm62_lw)
```

#### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style="B")
summary(knn_lw)
```

## Computing Gi statistics

### Gi statistics using fixed distance

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix. The output of localG() is a vector of G or Gstar values, with attributes "gstari" set to TRUE or FALSE, "call" set to the function call, and class "localG".

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below. This code chunk performs three tasks. First, it convert the output vector (i.e.Â *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join hunan data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>% 
  rename(gstat_fixed=as.matrix.gi.fixed.)
```

### Mapping Gi values with fixed distance weights

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### Gi statistics using adaptive distance

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

It is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values. The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
