---
title: "Hands-on Exercise 1.2"
editor: visual
---

## Overview

This exercise covers the following:

1.  [Choropleth Mapping with R](https://r4gdsa.netlify.app/chap02.html)

## Getting Started

Install and load the necessary packages

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## Reading in Geospatial Data

Reading in `MP14_SUBZONE_WEB_PL` shapefile.

```{r}
mpsz <- st_read(dsn = 'data/geospatial',
                layer = 'MP14_SUBZONE_WEB_PL')
```

Examine content of mpsz using the code chunk below

```{r}
mpsz
```

## Reading in Attribute Data

Reading in Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format. This is an aspatial data fie. Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

```{r}
popdata <- read_csv('data/aspatial/respopagesextod2011to2020.csv')
```

## Data Preparation

Examine popdata

```{r}
head(popdata, n=3)
```

Wrangling popdata to capture the population by the different age groups

-   `pivot_wider()` "widens" data, increasing the number of columns and decreasing the number of rows

```{r}
popdata2020 <- popdata %>% 
  filter(Time == 2020) %>% 
  group_by(PA, SZ, AG) %>% 
  summarise(POP = sum(Pop)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = AG,
              values_from = POP)
popdata2020
```

Further transformation of data, creating new column based on the following:

-   YOUNG: age group 0 to 4 until age group 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

```{r}
popdata2020 <- popdata2020 %>% 
  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>% 
  mutate(ECONOMY_ACTIVE = rowSums(.[7:11]) + rowSums(.[13:15])) %>% 
  mutate(AGED = rowSums(.[16:21])) %>% 
  mutate(TOTAL = rowSums(.[3:21])) %>% 
  mutate(DEPENDENCY = (YOUNG + AGED)/ECONOMY_ACTIVE) %>% 
  select(PA, SZ, YOUNG, ECONOMY_ACTIVE, AGED, TOTAL, DEPENDENCY)
popdata2020
```

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other hand the SUBZONE_N and PLN_AREA_N are in uppercase.

-   mutate_at makes it easier to mutate multiple columns. .funs behaves like a lambda

```{r}
popdata2020 <- popdata2020 %>% 
  mutate_at(.vars = vars(PA, SZ),
            .funs = funs(toupper)) %>% 
  filter(ECONOMY_ACTIVE > 0)
popdata2020
```

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier. The mpsz dataset is used as the left data table to ensure that the output will be a sf dataframe.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c('SUBZONE_N' = 'SZ'))
mpsz_pop2020
```

Write to an rds file

```{r}
write_rds(mpsz_pop2020, 'data/rds/mpszpop2020_new.rds')
```

## Choropleth Mapping Geospatial Data using tmap

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

### Plotting a choropleth map quickly by using *qtm()*

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases. The code chunk below will draw a cartographic standard choropleth map.

-   *tmap_mode()* with "plot" option is used to produce a static map. For interactive mode, "view" option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)

```{r}
tmap_mode('plot')
qtm(mpsz_pop2020,
    fill = 'DEPENDENCY')
```

### Creating a choropleth map by using tmap's elements

Despite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**'s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          style = 'quantile',
          palette = 'Blues',
          title = 'Dependency ratio') +
  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',
            main.title.position = 'center',
            main.title.size = 1,
            legend.height = 0.25,
            legend.width = 0.2,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type = '8star', size = 0.6) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2) +
  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA) and Population data from Department of Statistics DOS',
             position = c('left', 'bottom'))
```

The following are step-by-step breakdown of tmap functions:

#### Drawing a base map

The basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*. In the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

#### Drawing a choropleth map using tm_polygons()

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_polygons('DEPENDENCY')
```

#### Drawing a choropleth map using tm_polygons()

Actually, *tm_polygons()* is a wrapper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map. The code chunk below draws a choropleth map by using *tm_fill()* alone.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY')
```

To add the boundary of the planning subzones, tm_borders will be used.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY') +
  tm_borders(lwd = 0.1, alpha = 1)
```

#### Data classification methods of tmap

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes. **tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*. To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.

The code chunk below shows a quantile data classification that used 5 classes.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          n = 5,
          style = 'quantile') +
  tm_borders(alpha = 0.5)
```

The below code chunk uses equal data classification method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          n = 7,
          style = 'equal') +
  tm_borders(alpha = 0.5)
```

The below code chunk uses kmeans data classification method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          n = 5,
          style = 'kmeans') +
  tm_borders(alpha=0.5)
```

#### Plotting choropleth map with custom break

For all built-in classfication styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).

Before we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of `DEPENDENCY` field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

Using the results above, we set break points at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 19.00. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 19.00).

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          breaks = c(0,0.60,0.70,0.80,0.90,19.00)) +
  tm_borders(alpha = 0.5)
```

#### Colour Scheme

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package. To change the colour, we assign the preferred colour to palette argument of *tm_fill()* as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          n = 6,
          style = 'quantile',
          palette = 'Blues') +
  tm_borders(alpha = 0.5)
```

To revers the colour shading, add a '-' prefix.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          style = 'quantile',
          palette = '-Blues') +
  tm_borders(alpha = 0.5)
```

#### Map Layouts

Map layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.

**Map Legend** - In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          style = 'jenks',
          palette = 'Blues',
          legend.hist = TRUE,
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',
            main.title.position = 'center',
            main.title.size = 1,
            legend.height = 0.45,
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c('right','bottom'),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

**Map Style** - **tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          style = 'quantile',
          palette = 'Greens') +
  tm_borders(alpha = 0.5) +
  tmap_style('classic')
```

**Cartographic Furniture** - Beside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines. In the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          style = 'quantile',
          palette = 'Blues',
          title = 'No. of persons') +
  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',
            main.title.position = 'center',
            main.title.size = 1,
            legend.height = 0.25,
            legend.width = 0.2,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type = '8star', size = 0.6) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA) and Population data from Department of Statistics DOS',
             position = c('left', 'bottom')) +
  tmap_style('cobalt')
```

#### Drawing small multiple choropleth maps

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by defining a group-by variable in *tm_facets()*, and

-   by creating multiple stand-alone maps with *tmap_arrange()*.

**Assigning multiple values to at least one of the aesthetics arguments**

In this example, small multiple choropleth maps are created by defining ***ncols*** in *tm_fill().*

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill(c('YOUNG', 'AGED'),
          style = 'equal',
          palette = 'Blues') +
  tm_layout(legend.position = c('right', 'bottom')) +
  tm_borders(alpha = 0.5) +
  tmap_style('white')
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

**Defining a group_by variable in *tm_facets()***

In this example, multiple small choropleth maps are created by using **tm_facets()**.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill('DEPENDENCY',
          style = 'quantile',
          palette = 'Blues',
          thres.poly = 0) +
  tm_facets(by = 'REGION_N',
            free.coords = TRUE,
            drop.shapes = TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c('center', 'center'),
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

**Creating multiple stand-alone maps with tmap_arrange()**

In this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.

```{r}
youngmap <- tm_shape(mpsz_pop2020) +
  tm_polygons('YOUNG',
              style = 'quantile',
              palette = 'Blues')

agedmap <- tm_shape(mpsz_pop2020) +
  tm_polygons('AGED',
              style = 'quantile',
              palette = 'Blues')

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

#### Mapping Spatial Object Meeting a Selection Criteria

Instead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=='CENTRAL REGION', ]) +
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
